Command line: main.py
Total duration: 5.41792s
File: <frozen importlib._bootstrap_external>
File duration: 0.894774s (16.52%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|       579|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|       579|   0.00300264|  5.18591e-06|  0.06%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|      1113|   0.00100112|  8.99479e-07|  0.02%|
    52|         0|            0|            0|  0.00%|
    53|      1113|   0.00700641|  6.29506e-06|  0.13%|
    54|      1113|   0.00400424|   3.5977e-06|  0.07%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|      2623|   0.00400281|  1.52604e-06|  0.07%|
    63|         0|            0|            0|  0.00%|
    64|     22468|    0.0920765|  4.09812e-06|  1.70%|
(call)|      2623|    0.0520453|  1.98419e-05|  0.96%|# <frozen importlib._bootstrap_external>:64 <listcomp>
    65|      2623|   0.00700784|  2.67169e-06|  0.13%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|       742|   0.00200152|  2.69747e-06|  0.04%|
    69|         0|            0|            0|  0.00%|
    70|       742|   0.00300169|   4.0454e-06|  0.06%|
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|      9730|    0.0310438|  3.19052e-06|  0.57%|
    74|      9730|    0.0330338|  3.39505e-06|  0.61%|
    75|       742|    0.0010016|  1.34986e-06|  0.02%|
    76|       742|   0.00100136|  1.34954e-06|  0.02%|
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|      1590|    0.0030036|  1.88905e-06|  0.06%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|
    87|      1590|    0.0710611|  4.46925e-05|  1.31%|
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|
    90|       593|   0.00100112|  1.68823e-06|  0.02%|
    91|         0|            0|            0|  0.00%|
    92|       593|   0.00200176|  3.37565e-06|  0.04%|
    93|       593|   0.00700474|  1.18124e-05|  0.13%|
(call)|       593|    0.0300269|  5.06356e-05|  0.55%|# <frozen importlib._bootstrap_external>:80 _path_stat
    94|        94|            0|            0|  0.00%|
    95|        94|   0.00100088|  1.06477e-05|  0.02%|
    96|       499|   0.00100088|  2.00577e-06|  0.02%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|       546|   0.00100088|  1.83312e-06|  0.02%|
   100|         0|            0|            0|  0.00%|
   101|       546|    0.0110109|  2.01665e-05|  0.20%|
(call)|       546|    0.0400348|  7.33238e-05|  0.74%|# <frozen importlib._bootstrap_external>:90 _path_is_mode_type
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|        47|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|
   106|        47|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|
   108|        47|    0.0030036|  6.39063e-05|  0.06%|
(call)|        47|   0.00200152|  4.25856e-05|  0.04%|# <frozen importlib._bootstrap_external>:90 _path_is_mode_type
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|       742|   0.00400352|  5.39559e-06|  0.07%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|       742|   0.00200224|  2.69844e-06|  0.04%|
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|       742|   0.00300264|  4.04669e-06|  0.06%|
   320|       742|      0.01001|  1.34906e-05|  0.18%|
(call)|       742|    0.0710838|  9.58002e-05|  1.31%|# <frozen importlib._bootstrap_external>:68 _path_split
   321|       742|   0.00800753|  1.07918e-05|  0.15%|
   322|       742|   0.00300217|  4.04605e-06|  0.06%|
   323|       742|     0.002002|  2.69811e-06|  0.04%|
   324|         0|            0|            0|  0.00%|
   325|       742|            0|            0|  0.00%|
   326|       742|   0.00400233|  5.39398e-06|  0.07%|
   327|       742|   0.00200152|  2.69747e-06|  0.04%|
   328|       742|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|       742|   0.00600529|  8.09338e-06|  0.11%|
   332|       742|   0.00300264|  4.04669e-06|  0.06%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|       742|   0.00400305|  5.39494e-06|  0.07%|
   337|       742|    0.0070076|   9.4442e-06|  0.13%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|
   362|       742|    0.0100105|  1.34912e-05|  0.18%|
(call)|       742|    0.0320277|   4.3164e-05|  0.59%|# <frozen importlib._bootstrap_external>:62 _path_join
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|
   408|         0|            0|            0|  0.00%|
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|
   423|         0|            0|            0|  0.00%|
   424|       452|            0|            0|  0.00%|
   425|       452|   0.00400305|   8.8563e-06|  0.07%|
   426|       371|            0|            0|  0.00%|
   427|       371|   0.00500441|   1.3489e-05|  0.09%|
(call)|       371|    0.0770741|  0.000207747|  1.42%|# <frozen importlib._bootstrap_external>:294 cache_from_source
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|
   430|        81|   0.00100136|  1.23624e-05|  0.02%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|        81|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|
   456|       371|   0.00100112|  2.69844e-06|  0.02%|
   457|       371|   0.00100064|  2.69715e-06|  0.02%|
   458|         0|            0|            0|  0.00%|
   459|       371|   0.00100112|  2.69844e-06|  0.02%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|       371|   0.00600576|   1.6188e-05|  0.11%|
(call)|       371|            0|            0|  0.00%|# <frozen importlib._bootstrap_external>:964 get_filename
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|       371|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|
   509|       371|   0.00300312|  8.09466e-06|  0.06%|
   510|       371|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|
   514|       371|   0.00299907|  8.08374e-06|  0.06%|
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|
   518|       371|   0.00200152|  5.39494e-06|  0.04%|
(call)|       371|   0.00700712|  1.88871e-05|  0.13%|# <frozen importlib._bootstrap_external>:51 _unpack_uint32
   519|         0|            0|            0|  0.00%|
   520|       371|   0.00100088|  2.69779e-06|  0.02%|
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|
   523|       371|   0.00400472|  1.07944e-05|  0.07%|
   524|         0|            0|            0|  0.00%|
   525|         0|            0|            0|  0.00%|
   526|       371|   0.00100088|  2.69779e-06|  0.02%|
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|
   541|         0|            0|            0|  0.00%|
   542|         0|            0|            0|  0.00%|
   543|         0|            0|            0|  0.00%|
   544|         0|            0|            0|  0.00%|
   545|       371|   0.00200295|   5.3988e-06|  0.04%|
(call)|       371|   0.00300288|  8.09402e-06|  0.06%|# <frozen importlib._bootstrap_external>:51 _unpack_uint32
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|
   549|       371|   0.00100064|  2.69715e-06|  0.02%|
   550|       371|   0.00200248|  5.39751e-06|  0.04%|
(call)|       371|   0.00200176|  5.39559e-06|  0.04%|# <frozen importlib._bootstrap_external>:51 _unpack_uint32
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|
   562|         0|            0|            0|  0.00%|
   563|         0|            0|            0|  0.00%|
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|
   568|         0|            0|            0|  0.00%|
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|
   578|       371|     0.002002|  5.39623e-06|  0.04%|
   579|         0|            0|            0|  0.00%|
   580|       371|    0.0370295|    9.981e-05|  0.68%|
   581|       371|   0.00100088|  2.69779e-06|  0.02%|
   582|       371|   0.00300241|  8.09274e-06|  0.06%|
(call)|       371|   0.00300241|  8.09274e-06|  0.06%|# <frozen importlib._bootstrap>:222 _verbose_message
   583|       371|   0.00100112|  2.69844e-06|  0.02%|
   584|       371|   0.00300241|  8.09274e-06|  0.06%|
   585|       371|   0.00300288|  8.09402e-06|  0.06%|
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|       452|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|       452|   0.00100136|  2.21539e-06|  0.02%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|
   653|       452|   0.00400305|   8.8563e-06|  0.07%|
   654|         0|            0|            0|  0.00%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|       452|    0.0100074|  2.21402e-05|  0.18%|
(call)|       452|    0.0130117|  2.87869e-05|  0.24%|# <frozen importlib._bootstrap>:342 __init__
   662|       452|   0.00100017|  2.21276e-06|  0.02%|
   663|         0|            0|            0|  0.00%|
   664|         0|            0|            0|  0.00%|
   665|       452|   0.00300193|  6.64143e-06|  0.06%|
   666|         0|            0|            0|  0.00%|
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|
   672|         0|            0|            0|  0.00%|
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|
   675|       452|   0.00100064|  2.21381e-06|  0.02%|
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|
   682|         0|            0|            0|  0.00%|
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|
   686|       452|   0.00400352|  8.85736e-06|  0.07%|
   687|       452|   0.00199747|  4.41918e-06|  0.04%|
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|       452|   0.00400329|  8.85683e-06|  0.07%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|
   774|       371|            0|            0|  0.00%|
   775|       371|     0.002002|  5.39623e-06|  0.04%|
   776|         0|            0|            0|  0.00%|
   777|       371|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|       371|   0.00500464|  1.34896e-05|  0.09%|
(call)|       371|     0.389337|   0.00104942|  7.19%|# <frozen importlib._bootstrap_external>:849 get_code
   780|       371|     0.002002|  5.39623e-06|  0.04%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|       371|   0.00400424|  1.07931e-05|  0.07%|
(call)|       371|      5.37688|    0.0144929| 99.24%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|
   793|         0|            0|            0|  0.00%|
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|         0|            0|            0|  0.00%|
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|
   849|       371|   0.00100088|  2.69779e-06|  0.02%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|
   855|         0|            0|            0|  0.00%|
   856|       371|   0.00400424|  1.07931e-05|  0.07%|
(call)|       371|   0.00900865|  2.42821e-05|  0.17%|# <frozen importlib._bootstrap_external>:456 _check_name_wrapper
   857|       371|    0.0010016|  2.69972e-06|  0.02%|
   858|       371|   0.00200176|  5.39559e-06|  0.04%|
   859|       371|   0.00300336|  8.09531e-06|  0.06%|
   860|       371|   0.00300288|  8.09402e-06|  0.06%|
   861|       371|   0.00100064|  2.69715e-06|  0.02%|
   862|       371|   0.00200152|  5.39494e-06|  0.04%|
   863|       371|   0.00400257|  1.07886e-05|  0.07%|
(call)|       371|    0.0941005|   0.00025364|  1.74%|# <frozen importlib._bootstrap_external>:294 cache_from_source
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|
   867|       371|   0.00200129|   5.3943e-06|  0.04%|
   868|       371|   0.00300193|  8.09145e-06|  0.06%|
(call)|       371|    0.0230198|   6.2048e-05|  0.42%|# <frozen importlib._bootstrap_external>:1010 path_stats
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|       371|   0.00600529|  1.61868e-05|  0.11%|
   873|       371|   0.00100064|  2.69715e-06|  0.02%|
   874|       371|   0.00400281|  1.07892e-05|  0.07%|
(call)|       371|      0.10308|  0.000277844|  1.90%|# <frozen importlib._bootstrap_external>:969 get_data
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|
   878|       371|            0|            0|  0.00%|
   879|       371|   0.00400448|  1.07937e-05|  0.07%|
   880|       371|   0.00200176|  5.39559e-06|  0.04%|
   881|         0|            0|            0|  0.00%|
   882|       371|            0|            0|  0.00%|
   883|       371|   0.00900793|  2.42801e-05|  0.17%|
(call)|       371|    0.0200164|  5.39526e-05|  0.37%|# <frozen importlib._bootstrap_external>:493 _classify_pyc
   884|       371|   0.00400233|   1.0788e-05|  0.07%|
   885|       371|   0.00100088|  2.69779e-06|  0.02%|
   886|       371|   0.00100088|  2.69779e-06|  0.02%|
   887|         0|            0|            0|  0.00%|
   888|         0|            0|            0|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|
   897|         0|            0|            0|  0.00%|
   898|         0|            0|            0|  0.00%|
   899|       742|   0.00400448|  5.39687e-06|  0.07%|
(call)|       371|    0.0110116|  2.96809e-05|  0.20%|# <frozen importlib._bootstrap_external>:526 _validate_timestamp_pyc
   900|       371|            0|            0|  0.00%|
   901|       371|   0.00100207|  2.70101e-06|  0.02%|
   902|       371|   0.00100064|  2.69715e-06|  0.02%|
   903|       371|   0.00200129|   5.3943e-06|  0.04%|
   904|       371|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|
   909|       742|   0.00100088|   1.3489e-06|  0.02%|
(call)|       371|   0.00200176|  5.39559e-06|  0.04%|# <frozen importlib._bootstrap>:222 _verbose_message
   910|       371|   0.00200176|  5.39559e-06|  0.04%|
   911|       742|   0.00200176|  2.69779e-06|  0.04%|
(call)|       371|    0.0530436|  0.000142975|  0.98%|# <frozen importlib._bootstrap_external>:578 _compile_bytecode
   912|       371|    0.0019908|  5.36602e-06|  0.04%|
   913|       371|   0.00100064|  2.69715e-06|  0.02%|
   914|         0|            0|            0|  0.00%|
   915|         0|            0|            0|  0.00%|
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|
   939|       371|   0.00200129|   5.3943e-06|  0.04%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|       371|            0|            0|  0.00%|
   943|       371|   0.00300145|  8.09017e-06|  0.06%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|
   949|         0|            0|            0|  0.00%|
   950|         0|            0|            0|  0.00%|
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|
   958|         0|            0|            0|  0.00%|
   959|         0|            0|            0|  0.00%|
   960|         0|            0|            0|  0.00%|
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|
   964|       371|            0|            0|  0.00%|
   965|         0|            0|            0|  0.00%|
   966|         0|            0|            0|  0.00%|
   967|       371|            0|            0|  0.00%|
   968|         0|            0|            0|  0.00%|
   969|       371|     0.002002|  5.39623e-06|  0.04%|
   970|         0|            0|            0|  0.00%|
   971|       371|   0.00300288|  8.09402e-06|  0.06%|
   972|       371|    0.0730488|  0.000196897|  1.35%|
   973|       371|    0.0250266|   6.7457e-05|  0.46%|
   974|         0|            0|            0|  0.00%|
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|         0|            0|            0|  0.00%|
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|
   988|         0|            0|            0|  0.00%|
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|
   997|         0|            0|            0|  0.00%|
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|
  1008|         0|            0|            0|  0.00%|
  1009|         0|            0|            0|  0.00%|
  1010|       371|   0.00300312|  8.09466e-06|  0.06%|
  1011|         0|            0|            0|  0.00%|
  1012|       371|   0.00200152|  5.39494e-06|  0.04%|
(call)|       371|    0.0170145|  4.58612e-05|  0.31%|# <frozen importlib._bootstrap_external>:80 _path_stat
  1013|       371|   0.00100064|  2.69715e-06|  0.02%|
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|
  1021|         0|            0|            0|  0.00%|
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|
  1043|         0|            0|            0|  0.00%|
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|
  1052|         0|            0|            0|  0.00%|
  1053|         0|            0|            0|  0.00%|
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|
  1056|         0|            0|            0|  0.00%|
  1057|         0|            0|            0|  0.00%|
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|
  1061|         0|            0|            0|  0.00%|
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|
  1064|         0|            0|            0|  0.00%|
  1065|         0|            0|            0|  0.00%|
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|
  1068|         0|            0|            0|  0.00%|
  1069|         0|            0|            0|  0.00%|
  1070|         0|            0|            0|  0.00%|
  1071|         0|            0|            0|  0.00%|
  1072|         0|            0|            0|  0.00%|
  1073|         0|            0|            0|  0.00%|
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|
  1076|         0|            0|            0|  0.00%|
  1077|         0|            0|            0|  0.00%|
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|
  1081|         0|            0|            0|  0.00%|
  1082|         0|            0|            0|  0.00%|
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|
  1087|         0|            0|            0|  0.00%|
  1088|        81|            0|            0|  0.00%|
  1089|        81|   0.00200152|  2.47102e-05|  0.04%|
  1090|        81|   0.00200152|  2.47102e-05|  0.04%|
  1091|         0|            0|            0|  0.00%|
  1092|         0|            0|            0|  0.00%|
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|
  1095|         0|            0|            0|  0.00%|
  1096|         0|            0|            0|  0.00%|
  1097|         0|            0|            0|  0.00%|
  1098|         0|            0|            0|  0.00%|
  1099|        81|   0.00100064|  1.23536e-05|  0.02%|
  1100|         0|            0|            0|  0.00%|
  1101|       162|   0.00100064|  6.17681e-06|  0.02%|
(call)|        81|     0.049046|  0.000605507|  0.91%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
  1102|        81|            0|            0|  0.00%|
  1103|       162|   0.00100112|  6.17975e-06|  0.02%|
(call)|        81|            0|            0|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
  1104|        81|            0|            0|  0.00%|
  1105|        81|            0|            0|  0.00%|
  1106|         0|            0|            0|  0.00%|
  1107|        81|            0|            0|  0.00%|
  1108|         0|            0|            0|  0.00%|
  1109|        81|   0.00100088|  1.23566e-05|  0.02%|
(call)|        81|    0.0780723|  0.000963856|  1.44%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
  1110|       162|   0.00100088|  6.17828e-06|  0.02%|
(call)|        81|            0|            0|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
  1111|        81|            0|            0|  0.00%|
  1112|         0|            0|            0|  0.00%|
  1113|         0|            0|            0|  0.00%|
  1114|         0|            0|            0|  0.00%|
  1115|         0|            0|            0|  0.00%|
  1116|         0|            0|            0|  0.00%|
  1117|         0|            0|            0|  0.00%|
  1118|         0|            0|            0|  0.00%|
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|
  1121|         0|            0|            0|  0.00%|
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|
  1124|         0|            0|            0|  0.00%|
  1125|         0|            0|            0|  0.00%|
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|
  1128|         0|            0|            0|  0.00%|
  1129|         0|            0|            0|  0.00%|
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|
  1132|         0|            0|            0|  0.00%|
  1133|         0|            0|            0|  0.00%|
  1134|         0|            0|            0|  0.00%|
  1135|         0|            0|            0|  0.00%|
  1136|         0|            0|            0|  0.00%|
  1137|         0|            0|            0|  0.00%|
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|
  1140|         0|            0|            0|  0.00%|
  1141|         0|            0|            0|  0.00%|
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|
  1144|         0|            0|            0|  0.00%|
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|
  1147|         0|            0|            0|  0.00%|
  1148|         0|            0|            0|  0.00%|
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|
  1151|         0|            0|            0|  0.00%|
  1152|         0|            0|            0|  0.00%|
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|
  1155|         0|            0|            0|  0.00%|
  1156|         0|            0|            0|  0.00%|
  1157|         0|            0|            0|  0.00%|
  1158|         0|            0|            0|  0.00%|
  1159|         0|            0|            0|  0.00%|
  1160|         0|            0|            0|  0.00%|
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|
  1163|         0|            0|            0|  0.00%|
  1164|         0|            0|            0|  0.00%|
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|
  1167|         0|            0|            0|  0.00%|
  1168|         0|            0|            0|  0.00%|
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|
  1171|         0|            0|            0|  0.00%|
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|
  1174|         0|            0|            0|  0.00%|
  1175|         0|            0|            0|  0.00%|
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|
  1178|         0|            0|            0|  0.00%|
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|
  1181|         0|            0|            0|  0.00%|
  1182|         0|            0|            0|  0.00%|
  1183|         0|            0|            0|  0.00%|
  1184|         0|            0|            0|  0.00%|
  1185|         0|            0|            0|  0.00%|
  1186|         0|            0|            0|  0.00%|
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|
  1189|         0|            0|            0|  0.00%|
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|
  1192|         0|            0|            0|  0.00%|
  1193|         0|            0|            0|  0.00%|
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|
  1197|         0|            0|            0|  0.00%|
  1198|         0|            0|            0|  0.00%|
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|
  1201|         0|            0|            0|  0.00%|
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|
  1206|         0|            0|            0|  0.00%|
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|
  1209|         0|            0|            0|  0.00%|
  1210|         0|            0|            0|  0.00%|
  1211|         0|            0|            0|  0.00%|
  1212|         0|            0|            0|  0.00%|
  1213|         0|            0|            0|  0.00%|
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|
  1216|         0|            0|            0|  0.00%|
  1217|         0|            0|            0|  0.00%|
  1218|         0|            0|            0|  0.00%|
  1219|         0|            0|            0|  0.00%|
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|
  1222|         0|            0|            0|  0.00%|
  1223|         0|            0|            0|  0.00%|
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|
  1226|         0|            0|            0|  0.00%|
  1227|         0|            0|            0|  0.00%|
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|
  1230|         0|            0|            0|  0.00%|
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|
  1233|         0|            0|            0|  0.00%|
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|
  1236|         0|            0|            0|  0.00%|
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|
  1239|         0|            0|            0|  0.00%|
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|
  1242|         0|            0|            0|  0.00%|
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|
  1245|         0|            0|            0|  0.00%|
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|
  1249|         0|            0|            0|  0.00%|
  1250|         0|            0|            0|  0.00%|
  1251|         0|            0|            0|  0.00%|
  1252|        47|            0|            0|  0.00%|
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|
  1255|        47|            0|            0|  0.00%|
  1256|         0|            0|            0|  0.00%|
  1257|        94|     0.002002|  2.12979e-05|  0.04%|
  1258|        94|            0|            0|  0.00%|
  1259|        94|   0.00100112|  1.06502e-05|  0.02%|
(call)|        47|   0.00500631|  0.000106517|  0.09%|# <frozen zipimport>:63 __init__
(call)|        47|    0.0120099|  0.000255529|  0.22%|# <frozen importlib._bootstrap_external>:1520 path_hook_for_FileFinder
  1260|        47|            0|            0|  0.00%|
  1261|        47|            0|            0|  0.00%|
  1262|         0|            0|            0|  0.00%|
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|
  1265|       613|   0.00200176|  3.26552e-06|  0.04%|
  1266|         0|            0|            0|  0.00%|
  1267|         0|            0|            0|  0.00%|
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|
  1272|         0|            0|            0|  0.00%|
  1273|       613|   0.00300169|  4.89672e-06|  0.06%|
  1274|        34|            0|            0|  0.00%|
  1275|        34|            0|            0|  0.00%|
  1276|         0|            0|            0|  0.00%|
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|
  1279|         0|            0|            0|  0.00%|
  1280|       613|            0|            0|  0.00%|
  1281|       613|   0.00600529|  9.79655e-06|  0.11%|
  1282|        47|            0|            0|  0.00%|
  1283|        47|    0.0010004|  2.12852e-05|  0.02%|
(call)|        47|    0.0200193|  0.000425942|  0.37%|# <frozen importlib._bootstrap_external>:1252 _path_hooks
  1284|        47|            0|            0|  0.00%|
  1285|       613|   0.00100088|  1.63276e-06|  0.02%|
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|
  1288|         0|            0|            0|  0.00%|
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|
  1291|         0|            0|            0|  0.00%|
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|
  1295|         0|            0|            0|  0.00%|
  1296|         0|            0|            0|  0.00%|
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|
  1301|         0|            0|            0|  0.00%|
  1302|       462|   0.00200152|   4.3323e-06|  0.04%|
  1303|         0|            0|            0|  0.00%|
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|
  1306|         0|            0|            0|  0.00%|
  1307|       462|     0.002002|  4.33334e-06|  0.04%|
  1308|       623|   0.00100112|  1.60693e-06|  0.02%|
  1309|       613|   0.00200224|   3.2663e-06|  0.04%|
  1310|         0|            0|            0|  0.00%|
  1311|       613|   0.00900698|  1.46933e-05|  0.17%|
(call)|       613|    0.0330293|  5.38814e-05|  0.61%|# <frozen importlib._bootstrap_external>:1265 _path_importer_cache
  1312|       613|   0.00100017|  1.63159e-06|  0.02%|
  1313|       579|   0.00100064|  1.72823e-06|  0.02%|
  1314|       579|   0.00500464|   8.6436e-06|  0.09%|
(call)|       579|     0.351296|  0.000606729|  6.48%|# <frozen importlib._bootstrap_external>:1431 find_spec
  1315|         0|            0|            0|  0.00%|
  1316|         0|            0|            0|  0.00%|
  1317|       579|    0.0010004|  1.72781e-06|  0.02%|
  1318|       127|   0.00100112|  7.88283e-06|  0.02%|
  1319|       452|   0.00100112|  2.21487e-06|  0.02%|
  1320|       452|   0.00100088|  2.21434e-06|  0.02%|
  1321|         0|            0|            0|  0.00%|
  1322|         0|            0|            0|  0.00%|
  1323|         0|            0|            0|  0.00%|
  1324|         0|            0|            0|  0.00%|
  1325|         0|            0|            0|  0.00%|
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|
  1328|         0|            0|            0|  0.00%|
  1329|         0|            0|            0|  0.00%|
  1330|        10|            0|            0|  0.00%|
(call)|        10|            0|            0|  0.00%|# <frozen importlib._bootstrap>:342 __init__
  1331|        10|            0|            0|  0.00%|
  1332|        10|            0|            0|  0.00%|
  1333|         0|            0|            0|  0.00%|
  1334|       462|            0|            0|  0.00%|
  1335|         0|            0|            0|  0.00%|
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|
  1338|         0|            0|            0|  0.00%|
  1339|         0|            0|            0|  0.00%|
  1340|       462|   0.00300241|  6.49871e-06|  0.06%|
  1341|        34|            0|            0|  0.00%|
  1342|       462|   0.00200248|  4.33437e-06|  0.04%|
(call)|       462|     0.411348|  0.000890364|  7.59%|# <frozen importlib._bootstrap_external>:1302 _get_spec
  1343|       462|   0.00300312|  6.50026e-06|  0.06%|
  1344|         0|            0|            0|  0.00%|
  1345|       462|   0.00200224|  4.33385e-06|  0.04%|
  1346|        10|            0|            0|  0.00%|
  1347|        10|            0|            0|  0.00%|
  1348|         0|            0|            0|  0.00%|
  1349|         0|            0|            0|  0.00%|
  1350|         0|            0|            0|  0.00%|
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|
  1354|        10|   0.00100064|  0.000100064|  0.02%|
  1355|         0|            0|            0|  0.00%|
  1356|       452|   0.00200176|  4.42868e-06|  0.04%|
  1357|         0|            0|            0|  0.00%|
  1358|         0|            0|            0|  0.00%|
  1359|         0|            0|            0|  0.00%|
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|
  1364|         0|            0|            0|  0.00%|
  1365|         0|            0|            0|  0.00%|
  1366|         0|            0|            0|  0.00%|
  1367|         0|            0|            0|  0.00%|
  1368|         0|            0|            0|  0.00%|
  1369|         0|            0|            0|  0.00%|
  1370|         0|            0|            0|  0.00%|
  1371|         0|            0|            0|  0.00%|
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|
  1374|         0|            0|            0|  0.00%|
  1375|         0|            0|            0|  0.00%|
  1376|         0|            0|            0|  0.00%|
  1377|         0|            0|            0|  0.00%|
  1378|         0|            0|            0|  0.00%|
  1379|         0|            0|            0|  0.00%|
  1380|         0|            0|            0|  0.00%|
  1381|         0|            0|            0|  0.00%|
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|
  1384|         0|            0|            0|  0.00%|
  1385|         0|            0|            0|  0.00%|
  1386|         0|            0|            0|  0.00%|
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|
  1389|         0|            0|            0|  0.00%|
  1390|         0|            0|            0|  0.00%|
  1391|         0|            0|            0|  0.00%|
  1392|         0|            0|            0|  0.00%|
  1393|         0|            0|            0|  0.00%|
  1394|        47|            0|            0|  0.00%|
  1395|         0|            0|            0|  0.00%|
  1396|         0|            0|            0|  0.00%|
  1397|         0|            0|            0|  0.00%|
  1398|        47|            0|            0|  0.00%|
  1399|       188|            0|            0|  0.00%|
  1400|       893|   0.00600386|  6.72324e-06|  0.11%|
(call)|       376|   0.00300097|  7.98132e-06|  0.06%|# <frozen importlib._bootstrap_external>:1400 <genexpr>
  1401|        47|            0|            0|  0.00%|
  1402|         0|            0|            0|  0.00%|
  1403|        47|            0|            0|  0.00%|
  1404|        47|            0|            0|  0.00%|
  1405|        47|            0|            0|  0.00%|
  1406|        47|            0|            0|  0.00%|
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|
  1409|         0|            0|            0|  0.00%|
  1410|         0|            0|            0|  0.00%|
  1411|         0|            0|            0|  0.00%|
  1412|         0|            0|            0|  0.00%|
  1413|         0|            0|            0|  0.00%|
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|
  1418|         0|            0|            0|  0.00%|
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|
  1421|         0|            0|            0|  0.00%|
  1422|         0|            0|            0|  0.00%|
  1423|         0|            0|            0|  0.00%|
  1424|         0|            0|            0|  0.00%|
  1425|         0|            0|            0|  0.00%|
  1426|       452|   0.00100112|  2.21487e-06|  0.02%|
  1427|       452|   0.00200105|   4.4271e-06|  0.04%|
(call)|       371|   0.00500274|  1.34845e-05|  0.09%|# <frozen importlib._bootstrap_external>:939 __init__
(call)|        81|   0.00400305|  4.94203e-05|  0.07%|# <frozen importlib._bootstrap_external>:1088 __init__
  1428|       904|    0.0100095|  1.10725e-05|  0.18%|
(call)|       452|    0.0430305|  9.52002e-05|  0.79%|# <frozen importlib._bootstrap_external>:629 spec_from_file_location
  1429|       452|            0|            0|  0.00%|
  1430|         0|            0|            0|  0.00%|
  1431|       579|   0.00200081|  3.45563e-06|  0.04%|
  1432|         0|            0|            0|  0.00%|
  1433|         0|            0|            0|  0.00%|
  1434|         0|            0|            0|  0.00%|
  1435|         0|            0|            0|  0.00%|
  1436|       579|   0.00100183|  1.73028e-06|  0.02%|
  1437|       579|   0.00400424|  6.91579e-06|  0.07%|
  1438|       579|   0.00200224|   3.4581e-06|  0.04%|
  1439|       579|   0.00900722|  1.55565e-05|  0.17%|
(call)|       579|    0.0250213|  4.32147e-05|  0.46%|# <frozen importlib._bootstrap_external>:80 _path_stat
  1440|         0|            0|            0|  0.00%|
  1441|         0|            0|            0|  0.00%|
  1442|       579|   0.00500464|   8.6436e-06|  0.09%|
  1443|        47|            0|            0|  0.00%|
(call)|        47|    0.0230205|  0.000489798|  0.42%|# <frozen importlib._bootstrap_external>:1479 _fill_cache
  1444|        47|            0|            0|  0.00%|
  1445|         0|            0|            0|  0.00%|
  1446|       579|    0.0100091|  1.72868e-05|  0.18%|
(call)|       579|   0.00300264|  5.18591e-06|  0.06%|# <frozen importlib._bootstrap_external>:36 _relax_case
  1447|         0|            0|            0|  0.00%|
  1448|         0|            0|            0|  0.00%|
  1449|         0|            0|            0|  0.00%|
  1450|       579|   0.00700545|  1.20992e-05|  0.13%|
  1451|       579|   0.00200224|   3.4581e-06|  0.04%|
  1452|         0|            0|            0|  0.00%|
  1453|       579|   0.00300241|   5.1855e-06|  0.06%|
  1454|        47|            0|            0|  0.00%|
(call)|        47|   0.00400209|  8.51509e-05|  0.07%|# <frozen importlib._bootstrap_external>:62 _path_join
  1455|       141|            0|            0|  0.00%|
  1456|       141|            0|            0|  0.00%|
  1457|       141|   0.00200248|   1.4202e-05|  0.04%|
(call)|       141|   0.00400329|  2.83921e-05|  0.07%|# <frozen importlib._bootstrap_external>:62 _path_join
  1458|       141|            0|            0|  0.00%|
(call)|       141|    0.0120106|  8.51814e-05|  0.22%|# <frozen importlib._bootstrap_external>:99 _path_isfile
  1459|        47|            0|            0|  0.00%|
(call)|        47|   0.00299811|  6.37897e-05|  0.06%|# <frozen importlib._bootstrap_external>:1426 _get_spec
  1460|         0|            0|            0|  0.00%|
  1461|         0|            0|            0|  0.00%|
  1462|         0|            0|            0|  0.00%|
  1463|         0|            0|            0|  0.00%|
  1464|         0|            0|            0|  0.00%|
  1465|      1820|    0.0100093|  5.49961e-06|  0.18%|
  1466|      1693|    0.0140123|  8.27663e-06|  0.26%|
(call)|      1693|    0.0630541|   3.7244e-05|  1.16%|# <frozen importlib._bootstrap_external>:62 _path_join
  1467|      1693|    0.0230184|  1.35962e-05|  0.42%|
(call)|      1693|   0.00300288|   1.7737e-06|  0.06%|# <frozen importlib._bootstrap>:222 _verbose_message
  1468|      1693|   0.00400448|  2.36532e-06|  0.07%|
  1469|       405|   0.00400329|  9.88466e-06|  0.07%|
(call)|       405|     0.040036|  9.88542e-05|  0.74%|# <frozen importlib._bootstrap_external>:99 _path_isfile
  1470|       810|   0.00700426|  8.64724e-06|  0.13%|
(call)|       405|    0.0620499|   0.00015321|  1.15%|# <frozen importlib._bootstrap_external>:1426 _get_spec
  1471|       405|            0|            0|  0.00%|
  1472|       127|            0|            0|  0.00%|
  1473|         0|            0|            0|  0.00%|
  1474|         0|            0|            0|  0.00%|
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|
  1477|       127|            0|            0|  0.00%|
  1478|         0|            0|            0|  0.00%|
  1479|        47|   0.00100088|  2.12953e-05|  0.02%|
  1480|         0|            0|            0|  0.00%|
  1481|        47|            0|            0|  0.00%|
  1482|        47|            0|            0|  0.00%|
  1483|        47|   0.00400448|  8.52017e-05|  0.07%|
  1484|         0|            0|            0|  0.00%|
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|
  1487|         0|            0|            0|  0.00%|
  1488|         0|            0|            0|  0.00%|
  1489|         0|            0|            0|  0.00%|
  1490|        47|            0|            0|  0.00%|
  1491|         0|            0|            0|  0.00%|
  1492|         0|            0|            0|  0.00%|
  1493|         0|            0|            0|  0.00%|
  1494|         0|            0|            0|  0.00%|
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|
  1497|         0|            0|            0|  0.00%|
  1498|        47|            0|            0|  0.00%|
  1499|       768|   0.00100088|  1.30323e-06|  0.02%|
  1500|       721|   0.00700521|  9.71597e-06|  0.13%|
  1501|       721|            0|            0|  0.00%|
  1502|       579|     0.002002|  3.45769e-06|  0.04%|
  1503|         0|            0|            0|  0.00%|
  1504|       142|   0.00100088|  7.04846e-06|  0.02%|
  1505|       721|   0.00200105|  2.77538e-06|  0.04%|
  1506|        47|   0.00100112|  2.13004e-05|  0.02%|
  1507|        47|            0|            0|  0.00%|
  1508|       862|     0.004004|  4.64501e-06|  0.07%|
(call)|        47|   0.00300336|  6.39013e-05|  0.06%|# <frozen importlib._bootstrap_external>:1508 <setcomp>
  1509|         0|            0|            0|  0.00%|
  1510|         0|            0|            0|  0.00%|
  1511|         0|            0|            0|  0.00%|
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|
  1514|         0|            0|            0|  0.00%|
  1515|         0|            0|            0|  0.00%|
  1516|         0|            0|            0|  0.00%|
  1517|         0|            0|            0|  0.00%|
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|
  1520|        47|            0|            0|  0.00%|
  1521|         0|            0|            0|  0.00%|
  1522|        47|            0|            0|  0.00%|
(call)|        47|   0.00500512|  0.000106492|  0.09%|# <frozen importlib._bootstrap_external>:104 _path_isdir
  1523|         0|            0|            0|  0.00%|
  1524|        47|   0.00100088|  2.12953e-05|  0.02%|
(call)|        47|   0.00600386|  0.000127742|  0.11%|# <frozen importlib._bootstrap_external>:1394 __init__
File: <frozen importlib._bootstrap>
File duration: 0.634631s (11.71%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|       371|            0|            0|  0.00%|
    36|       371|     0.002002|  5.39623e-06|  0.04%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|       475|            0|            0|  0.00%|
    59|       475|   0.00300241|  6.32085e-06|  0.06%|
    60|       475|   0.00500417|  1.05351e-05|  0.09%|
    61|       475|   0.00300288|  6.32186e-06|  0.06%|
    62|       475|   0.00200224|  4.21524e-06|  0.04%|
    63|       475|   0.00100112|  2.10762e-06|  0.02%|
    64|       475|   0.00200224|  4.21524e-06|  0.04%|
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|
    78|      1040|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|      1040|   0.00200176|  1.92477e-06|  0.04%|
    85|      1040|   0.00800824|  7.70023e-06|  0.15%|
    86|      1040|   0.00100136|  9.62844e-07|  0.02%|
    87|         0|            0|            0|  0.00%|
    88|      1040|   0.00600576|  5.77477e-06|  0.11%|
    89|      1040|   0.00100017|  9.61698e-07|  0.02%|
    90|      1040|   0.00400281|  3.84886e-06|  0.07%|
    91|      1040|   0.00400352|  3.84954e-06|  0.07%|
    92|      2080|   0.00800776|  3.84989e-06|  0.15%|
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|
   101|      1040|   0.00200129|  1.92431e-06|  0.04%|
   102|         0|            0|            0|  0.00%|
   103|      1040|   0.00100017|  9.61698e-07|  0.02%|
   104|      1040|   0.00200272|  1.92569e-06|  0.04%|
   105|      1040|   0.00400281|  3.84886e-06|  0.07%|
   106|      1040|   0.00600505|  5.77409e-06|  0.11%|
   107|         0|            0|            0|  0.00%|
   108|      1040|   0.00702095|  6.75091e-06|  0.13%|
   109|      1040|   0.00300288|  2.88739e-06|  0.06%|
   110|      1040|    0.0030036|  2.88807e-06|  0.06%|
   111|       475|            0|            0|  0.00%|
   112|       475|   0.00100112|  2.10762e-06|  0.02%|
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|       477|            0|            0|  0.00%|
   144|       477|   0.00100064|  2.09778e-06|  0.02%|
   145|       477|   0.00200081|  4.19457e-06|  0.04%|
   146|         0|            0|            0|  0.00%|
   147|       477|   0.00100088|  2.09828e-06|  0.02%|
   148|       477|   0.00300193|  6.29335e-06|  0.06%|
(call)|       477|    0.0490448|  0.000102819|  0.91%|# <frozen importlib._bootstrap>:157 _get_module_lock
   149|       477|   0.00400257|  8.39113e-06|  0.07%|
(call)|       477|    0.0170128|  3.56663e-05|  0.31%|# <frozen importlib._bootstrap>:78 acquire
   150|         0|            0|            0|  0.00%|
   151|       477|            0|            0|  0.00%|
   152|       477|     0.006006|  1.25912e-05|  0.11%|
(call)|       477|    0.0160289|  3.36035e-05|  0.30%|# <frozen importlib._bootstrap>:103 release
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|
   157|      1040|   0.00100088|  9.62386e-07|  0.02%|
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|
   163|      1040|   0.00400519|  3.85115e-06|  0.07%|
   164|      1040|   0.00700593|  6.73647e-06|  0.13%|
   165|      1040|   0.00200224|  1.92523e-06|  0.04%|
   166|      1040|   0.00800729|  7.69932e-06|  0.15%|
   167|       475|   0.00300264|  6.32135e-06|  0.06%|
   168|       475|   0.00300288|  6.32186e-06|  0.06%|
   169|         0|            0|            0|  0.00%|
   170|      1040|    0.0030036|  2.88807e-06|  0.06%|
   171|       475|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|       475|   0.00400257|  8.42647e-06|  0.07%|
(call)|       475|    0.0160151|  3.37159e-05|  0.30%|# <frozen importlib._bootstrap>:58 __init__
   175|         0|            0|            0|  0.00%|
   176|       950|   0.00700545|  7.37416e-06|  0.13%|
   177|       475|   0.00500441|  1.05356e-05|  0.09%|
   178|       475|   0.00200224|  4.21524e-06|  0.04%|
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|       475|    0.0010004|  2.10611e-06|  0.02%|
   183|       475|   0.00200129|  4.21323e-06|  0.04%|
   184|         0|            0|            0|  0.00%|
   185|       475|   0.00100064|  2.10662e-06|  0.02%|
   186|         0|            0|            0|  0.00%|
   187|       475|   0.00200176|  4.21424e-06|  0.04%|
   188|         0|            0|            0|  0.00%|
   189|      1040|   0.00300384|   2.8883e-06|  0.06%|
   190|         0|            0|            0|  0.00%|
   191|      1040|   0.00500536|  4.81285e-06|  0.09%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|
   194|       563|    0.0060041|  1.06645e-05|  0.11%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|
   200|       563|     0.008008|  1.42238e-05|  0.15%|
(call)|       563|    0.0180185|  3.20044e-05|  0.33%|# <frozen importlib._bootstrap>:157 _get_module_lock
   201|       563|   0.00300288|  5.33372e-06|  0.06%|
   202|       563|            0|            0|  0.00%|
(call)|       563|    0.0190198|   3.3783e-05|  0.35%|# <frozen importlib._bootstrap>:78 acquire
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|       563|   0.00400448|  7.11275e-06|  0.07%|
(call)|       563|    0.0110104|  1.95567e-05|  0.20%|# <frozen importlib._bootstrap>:103 release
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|       692|   0.00200248|  2.89375e-06|  0.04%|
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|       692|     0.068068|  9.83642e-05|  1.26%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\_globals.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\__config__.py:3 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\version.py:5 <module>
(call)|         1|   0.00900769|   0.00900769|  0.17%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\glob.py:1 <module>
(call)|         1|    0.0350318|    0.0350318|  0.65%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\_distributor_init.py:2 <module>
(call)|       155|      5.20873|    0.0336047| 96.14%|# <frozen importlib._bootstrap>:986 _find_and_load
(call)|       148|    0.0180178|  0.000121742|  0.33%|# <frozen importlib._bootstrap>:194 _lock_unlock_module
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\compat\_inspect.py:1 <module>
(call)|         1|   0.00600505|   0.00600505|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\pathlib.py:1 <module>
(call)|         1|   0.00300312|   0.00300312|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\_compat_pickle.py:9 <module>
(call)|         1|    0.0340307|    0.0340307|  0.63%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\pickle.py:1 <module>
(call)|         1|     0.054049|     0.054049|  1.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\compat\py3k.py:1 <module>
(call)|         1|    0.0610552|    0.0610552|  1.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\compat\__init__.py:1 <module>
(call)|         1|    0.0720654|    0.0720654|  1.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\overrides.py:1 <module>
(call)|         1|    0.0850773|    0.0850773|  1.57%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\multiarray.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\umath.py:1 <module>
(call)|         1|   0.00200248|   0.00200248|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\numbers.py:4 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_string_helpers.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_dtype.py:1 <module>
(call)|         1|    0.0110104|    0.0110104|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_type_aliases.py:1 <module>
(call)|         1|    0.0290267|    0.0290267|  0.54%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\numerictypes.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_asarray.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_exceptions.py:1 <module>
(call)|         1|   0.00500464|   0.00500464|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_methods.py:1 <module>
(call)|         1|    0.0440402|    0.0440402|  0.81%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1 <module>
(call)|         1|    0.0580521|    0.0580521|  1.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\shape_base.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_ufunc_config.py:1 <module>
(call)|         1|    0.0100095|    0.0100095|  0.18%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\arrayprint.py:1 <module>
(call)|         1|     0.102092|     0.102092|  1.88%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\numeric.py:1 <module>
(call)|         1|    0.0400362|    0.0400362|  0.74%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\defchararray.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\records.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\memmap.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\function_base.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\machar.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\getlimits.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\einsumfunc.py:1 <module>
(call)|         1|    0.0400367|    0.0400367|  0.74%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_add_newdocs.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_dtype_ctypes.py:1 <module>
(call)|         1|   0.00200224|   0.00200224|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\ast.py:1 <module>
(call)|         1|    0.0410373|    0.0410373|  0.76%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_internal.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\_pytesttester.py:1 <module>
(call)|         1|     0.399363|     0.399363|  7.37%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\__init__.py:1 <module>
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\mixins.py:1 <module>
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\ufunclike.py:1 <module>
(call)|         1|    0.0130126|    0.0130126|  0.24%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\type_check.py:1 <module>
(call)|         1|    0.0220201|    0.0220201|  0.41%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\scimath.py:1 <module>
(call)|         1|   0.00800776|   0.00800776|  0.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\twodim_base.py:1 <module>
(call)|         1|    0.0340307|    0.0340307|  0.63%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\linalg\linalg.py:1 <module>
(call)|         1|    0.0370336|    0.0370336|  0.68%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\linalg\__init__.py:1 <module>
(call)|         1|    0.0410373|    0.0410373|  0.76%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\matrixlib\defmatrix.py:1 <module>
(call)|         1|    0.0460417|    0.0460417|  0.85%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\matrixlib\__init__.py:1 <module>
(call)|         1|   0.00300217|   0.00300217|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\histograms.py:1 <module>
(call)|         1|    0.0480433|    0.0480433|  0.89%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\stride_tricks.py:1 <module>
(call)|         1|     0.109099|     0.109099|  2.01%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\index_tricks.py:1 <module>
(call)|         1|    0.0120111|    0.0120111|  0.22%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\nanfunctions.py:1 <module>
(call)|         1|    0.0110102|    0.0110102|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\shape_base.py:1 <module>
(call)|         1|    0.0140133|    0.0140133|  0.26%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\polynomial.py:1 <module>
(call)|         1|    0.0140131|    0.0140131|  0.26%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\utils.py:1 <module>
(call)|         1|     0.006006|     0.006006|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\arraysetops.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\format.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\_datasource.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\_iotools.py:1 <module>
(call)|         1|    0.0190172|    0.0190172|  0.35%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\npyio.py:1 <module>
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\abc.py:89 register
(call)|         2|   0.00300384|   0.00150192|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\collections\__init__.py:313 namedtuple
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\abc.py:84 __new__
(call)|         1|   0.00500488|   0.00500488|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\decimal.py:2 <module>
(call)|         1|    0.0160146|    0.0160146|  0.30%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\financial.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\arrayterator.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\arraypad.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\_version.py:1 <module>
(call)|         1|      0.26524|      0.26524|  4.90%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\__init__.py:1 <module>
(call)|         1|    0.0130119|    0.0130119|  0.24%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\fft\_pocketfft.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\fft\helper.py:1 <module>
(call)|         1|    0.0210197|    0.0210197|  0.39%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\fft\__init__.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\polyutils.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\_polybase.py:1 <module>
(call)|         1|    0.0110095|    0.0110095|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\polynomial.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\chebyshev.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\legendre.py:1 <module>
(call)|         1|   0.00200224|   0.00200224|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\hermite.py:1 <module>
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\hermite_e.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\laguerre.py:1 <module>
(call)|         1|    0.0370333|    0.0370333|  0.68%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\polynomial\__init__.py:1 <module>
(call)|        44|            0|            0|  0.00%|# <frozen importlib._bootstrap>:389 parent
(call)|         1|            0|            0|  0.00%|# <string>_1:1 <module>
(call)|        17|   0.00200152|  0.000117737|  0.04%|# <frozen importlib._bootstrap>:1017 _handle_fromlist
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\getlimits.py:498 __init__
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\getlimits.py:522 max
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\hashlib.py:5 <module>
(call)|         1|    0.0190172|    0.0190172|  0.35%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\hmac.py:1 <module>
(call)|         1|     0.023021|     0.023021|  0.42%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\secrets.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\re.py:250 compile
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\abc.py:7 abstractmethod
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_ufunc_config.py:429 __init__
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\contextlib.py:71 __call__
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\abc.py:96 __instancecheck__
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\random.py:721 getrandbits
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_0:2 concatenate
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\contextlib.py:72 inner
(call)|         1|    0.0620565|    0.0620565|  1.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\random\_pickle.py:1 <module>
(call)|         1|    0.0670612|    0.0670612|  1.24%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\random\__init__.py:1 <module>
(call)|         1|     0.004004|     0.004004|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\ctypeslib.py:1 <module>
(call)|         1|    0.0950859|    0.0950859|  1.76%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\ma\core.py:1 <module>
(call)|         1|   0.00700593|   0.00700593|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\ma\extras.py:1 <module>
(call)|         1|       0.1101|       0.1101|  2.03%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\ma\__init__.py:1 <module>
(call)|         1|      1.01892|      1.01892| 18.81%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\__init__.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_testutils.py:1 <module>
(call)|         1|   0.00400424|   0.00400424|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\__init__.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\deprecation.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\__config__.py:3 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\version.py:3 <module>
(call)|         1|    0.0470421|    0.0470421|  0.87%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_distributor_init.py:1 <module>
(call)|         1|   0.00300241|   0.00300241|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_pep440.py:1 <module>
(call)|         4|   0.00100088|   0.00025022|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\ctypes\__init__.py:75 CFUNCTYPE
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\ctypes\__init__.py:506 cast
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_ccallback.py:1 <module>
(call)|         1|    0.0430393|    0.0430393|  0.79%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\typing.py:1 <module>
(call)|         1|    0.0570512|    0.0570512|  1.05%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_uarray\_backend.py:1 <module>
(call)|         1|    0.0600548|    0.0600548|  1.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_uarray\__init__.py:1 <module>
(call)|         1|    0.0670607|    0.0670607|  1.24%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\uarray.py:1 <module>
(call)|         1|       0.1101|       0.1101|  2.03%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_basic.py:1 <module>
(call)|         1|    0.0180161|    0.0180161|  0.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_realtransforms.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_pocketfft\helper.py:1 <module>
(call)|         1|   0.00800705|   0.00800705|  0.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_pocketfft\basic.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_pocketfft\realtransforms.py:1 <module>
(call)|         1|    0.0150139|    0.0150139|  0.28%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_pocketfft\__init__.py:1 <module>
(call)|         1|    0.0180154|    0.0180154|  0.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_helper.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\_backend.py:1 <module>
(call)|         1|     0.161147|     0.161147|  2.97%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\fft\__init__.py:1 <module>
(call)|         1|     0.346315|     0.346315|  6.39%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\__init__.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\multiprocessing\process.py:10 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\multiprocessing\reduction.py:10 <module>
(call)|         1|    0.0110099|    0.0110099|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\multiprocessing\context.py:1 <module>
(call)|         1|    0.0160148|    0.0160148|  0.30%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\multiprocessing\__init__.py:15 <module>
(call)|         1|    0.0230203|    0.0230203|  0.42%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_util.py:1 <module>
(call)|         1|    0.0270255|    0.0270255|  0.50%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\sputils.py:1 <module>
(call)|         1|    0.0340309|    0.0340309|  0.63%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\base.py:1 <module>
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\data.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\dia.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\_index.py:1 <module>
(call)|         1|    0.0140126|    0.0140126|  0.26%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\compressed.py:1 <module>
(call)|         1|    0.0190172|    0.0190172|  0.35%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\csr.py:1 <module>
(call)|         1|    0.0010016|    0.0010016|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\csc.py:1 <module>
(call)|         1|   0.00400352|   0.00400352|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\lil.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\dok.py:1 <module>
(call)|         1|  0.000999928|  0.000999928|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\coo.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\bsr.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\construct.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\extract.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\_matrix_io.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\csgraph\_laplacian.py:1 <module>
(call)|         1|   0.00300241|   0.00300241|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\csgraph\_validation.py:1 <module>
(call)|         1|    0.0250227|    0.0250227|  0.46%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\csgraph\__init__.py:1 <module>
(call)|         1|     0.137125|     0.137125|  2.53%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\__init__.py:1 <module>
(call)|         1|     0.141128|     0.141128|  2.60%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\kdtree.py:3 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\multiprocessing\context.py:41 cpu_count
(call)|         1|   0.00300312|   0.00300312|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\_spherical_voronoi.py:1 <module>
(call)|         1|    0.0140121|    0.0140121|  0.26%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\decorator.py:30 <module>
(call)|         1|    0.0220196|    0.0220196|  0.41%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\_plotutils.py:1 <module>
(call)|         1|     0.004004|     0.004004|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\blas.py:1 <module>
(call)|         1|    0.0390358|    0.0390358|  0.72%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\lapack.py:1 <module>
(call)|         1|    0.0500453|    0.0500453|  0.92%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\misc.py:1 <module>
(call)|         1|   0.00300264|   0.00300264|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\flinalg.py:5 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp.py:16 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp_svd.py:1 <module>
(call)|         1|    0.0150132|    0.0150132|  0.28%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\basic.py:7 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp_lu.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_decomp_ldl.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp_cholesky.py:1 <module>
(call)|         1|  0.000998497|  0.000998497|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp_qr.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_decomp_qz.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\decomp_schur.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_decomp_polar.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\special_matrices.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_expm_frechet.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_matfuncs_sqrtm.py:1 <module>
(call)|         1|    0.0110099|    0.0110099|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\matfuncs.py:5 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_solvers.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_procrustes.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_sketches.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\_decomp_cossin.py:2 <module>
(call)|         1|     0.130118|     0.130118|  2.40%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\linalg\__init__.py:1 <module>
(call)|         1|     0.133121|     0.133121|  2.46%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\_procrustes.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\sf_error.py:1 <module>
(call)|         1|    0.0120108|    0.0120108|  0.22%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\orthogonal.py:1 <module>
(call)|         1|    0.0250225|    0.0250225|  0.46%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\_basic.py:5 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\_logsumexp.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\spfun_stats.py:32 <module>
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\_ellip_harm.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\_lambertw.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\_spherical_bessel.py:1 <module>
(call)|         1|    0.0560522|    0.0560522|  1.03%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\special\__init__.py:1 <module>
(call)|         1|    0.0720661|    0.0720661|  1.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\distance.py:1 <module>
(call)|         1|    0.0760679|    0.0760679|  1.40%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\_geometric_slerp.py:1 <module>
(call)|         1|    0.0570514|    0.0570514|  1.05%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\constants\codata.py:7 <module>
(call)|         1|   0.00300264|   0.00300264|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\constants\constants.py:1 <module>
(call)|         1|    0.0780702|    0.0780702|  1.44%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\constants\__init__.py:1 <module>
(call)|         1|    0.0800722|    0.0800722|  1.48%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\transform\_rotation_groups.py:1 <module>
(call)|         1|     0.085077|     0.085077|  1.57%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\transform\rotation.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\transform\_rotation_spline.py:1 <module>
(call)|         1|    0.0930843|    0.0930843|  1.72%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\transform\__init__.py:1 <module>
(call)|         1|     0.494449|     0.494449|  9.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\spatial\__init__.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\_ni_support.py:31 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\doccer.py:1 <module>
(call)|         1|   0.00500464|   0.00500464|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\_ni_docstrings.py:1 <module>
(call)|         1|    0.0500455|    0.0500455|  0.92%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\filters.py:31 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\fourier.py:31 <module>
(call)|         1|    0.0160151|    0.0160151|  0.30%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\interpolation.py:31 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\morphology.py:31 <module>
(call)|         1|   0.00800657|   0.00800657|  0.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\measurements.py:31 <module>
(call)|         1|     0.089081|     0.089081|  1.64%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\ndimage\__init__.py:1 <module>
(call)|         1|   0.00400376|   0.00400376|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_distr_params.py:1 <module>
(call)|         1|     0.004004|     0.004004|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\linesearch.py:1 <module>
(call)|         1|   0.00200224|   0.00200224|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\interface.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\utils.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\_threadsafety.py:1 <module>
(call)|         1|    0.0370336|    0.0370336|  0.68%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\iterative.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\minres.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\_gcrotmk.py:4 <module>
(call)|         1|   0.00300193|   0.00300193|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\lgmres.py:4 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\lsqr.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\lsmr.py:1 <module>
(call)|         1|    0.0580525|    0.0580525|  1.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\isolve\__init__.py:1 <module>
(call)|         1|   0.00800729|   0.00800729|  0.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\dsolve\linsolve.py:1 <module>
(call)|         1|   0.00100183|   0.00100183|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\dsolve\_add_newdocs.py:1 <module>
(call)|         1|    0.0150144|    0.0150144|  0.28%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\dsolve\__init__.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\eigen\lobpcg\lobpcg.py:1 <module>
(call)|         1|   0.00400376|   0.00400376|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\eigen\lobpcg\__init__.py:1 <module>
(call)|         1|    0.0160141|    0.0160141|  0.30%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\eigen\arpack\arpack.py:1 <module>
(call)|         1|    0.0200181|    0.0200181|  0.37%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\eigen\arpack\__init__.py:1 <module>
(call)|         1|    0.0240216|    0.0240216|  0.44%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\eigen\__init__.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\_expm_multiply.py:1 <module>
(call)|         1|   0.00800729|   0.00800729|  0.15%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\matfuncs.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\_onenormest.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\_norm.py:1 <module>
(call)|         1|     0.126114|     0.126114|  2.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\sparse\linalg\__init__.py:1 <module>
(call)|         1|      0.13312|      0.13312|  2.46%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_numdiff.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_hessian_update_strategy.py:1 <module>
(call)|         1|     0.006006|     0.006006|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_differentiable_functions.py:1 <module>
(call)|         1|     0.157143|     0.157143|  2.90%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\optimize.py:20 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion.py:1 <module>
(call)|         1|   0.00300241|   0.00300241|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_dogleg.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_ncg.py:1 <module>
(call)|         1|   0.00300336|   0.00300336|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trlib\__init__.py:1 <module>
(call)|         1|   0.00600576|   0.00600576|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_krylov.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_exact.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\util.py:1 <module>
(call)|         1|   0.00500488|   0.00500488|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\result.py:1 <module>
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\concurrent\__init__.py:1 <module>
(call)|         1|    0.0770698|    0.0770698|  1.42%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\logging\__init__.py:17 <module>
(call)|         1|    0.0840762|    0.0840762|  1.55%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\concurrent\futures\_base.py:4 <module>
(call)|         1|    0.0880795|    0.0880795|  1.63%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\concurrent\futures\__init__.py:4 <module>
(call)|         1|     0.103093|     0.103093|  1.90%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\ssl.py:4 <module>
(call)|         1|   0.00300217|   0.00300217|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\constants.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\format_helpers.py:1 <module>
(call)|         1|   0.00400424|   0.00400424|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\base_futures.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\log.py:1 <module>
(call)|         1|    0.0110099|    0.0110099|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\coroutines.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\contextvars.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\exceptions.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\base_tasks.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\_weakrefset.py:36 __init__
(call)|         1|     0.019017|     0.019017|  0.35%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\events.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\futures.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\protocols.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\transports.py:1 <module>
(call)|         1|   0.00600529|   0.00600529|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\sslproto.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\locks.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\tasks.py:1 <module>
(call)|         1|    0.0170157|    0.0170157|  0.31%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\staggered.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\trsock.py:1 <module>
(call)|         1|     0.295268|     0.295268|  5.45%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\base_events.py:1 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\runners.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\queues.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\streams.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\subprocess.py:1 <module>
(call)|         1|    0.0010016|    0.0010016|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\base_subprocess.py:1 <module>
(call)|         1|   0.00400376|   0.00400376|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\proactor_events.py:1 <module>
(call)|         1|   0.00400305|   0.00400305|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\selector_events.py:1 <module>
(call)|         1|   0.00100017|   0.00100017|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\windows_utils.py:1 <module>
(call)|         1|    0.0300276|    0.0300276|  0.55%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\windows_events.py:1 <module>
(call)|         1|     0.349317|     0.349317|  6.45%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\asyncio\__init__.py:1 <module>
(call)|         1|   0.00700688|   0.00700688|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\difflib.py:1 <module>
(call)|         1|    0.0190167|    0.0190167|  0.35%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\case.py:1 <module>
(call)|         1|     0.376342|     0.376342|  6.95%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\async_case.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\suite.py:1 <module>
(call)|         1|    0.0110092|    0.0110092|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\loader.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\signals.py:1 <module>
(call)|         1|   0.00400329|   0.00400329|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\runner.py:1 <module>
(call)|         1|   0.00600505|   0.00600505|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\main.py:1 <module>
(call)|         1|     0.415377|     0.415377|  7.67%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\unittest\__init__.py:1 <module>
(call)|         1|   0.00700688|   0.00700688|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\testing\_private\utils.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\testing\_private\decorators.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\testing\_private\nosetester.py:1 <module>
(call)|         1|       0.4404|       0.4404|  8.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\testing\__init__.py:1 <module>
(call)|         1|     0.444402|     0.444402|  8.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_constraints.py:1 <module>
(call)|         1|   0.00500441|   0.00500441|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\projections.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\qp_subproblem.py:1 <module>
(call)|         1|    0.0120111|    0.0120111|  0.22%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\equality_constrained_sqp.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\canonical_constraint.py:1 <module>
(call)|         1|   0.00100017|   0.00100017|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\tr_interior_point.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\report.py:1 <module>
(call)|         1|     0.473429|     0.473429|  8.74%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\minimize_trustregion_constr.py:1 <module>
(call)|         1|     0.477433|     0.477433|  8.81%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_trustregion_constr\__init__.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\lbfgsb.py:1 <module>
(call)|         1|   0.00300241|   0.00300241|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\tnc.py:25 <module>
(call)|         1|   0.00300217|   0.00300217|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\cobyla.py:1 <module>
(call)|         1|   0.00300312|   0.00300312|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\slsqp.py:1 <module>
(call)|         1|     0.525477|     0.525477|  9.70%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_minimize.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\common.py:1 <module>
(call)|         1|   0.00400329|   0.00400329|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\trf.py:1 <module>
(call)|         1|    0.0010016|    0.0010016|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\dogbox.py:1 <module>
(call)|         1|    0.0110102|    0.0110102|  0.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\least_squares.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\trf_linear.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\bvls.py:1 <module>
(call)|         1|   0.00900817|   0.00900817|  0.17%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\lsq_linear.py:1 <module>
(call)|         1|     0.027024|     0.027024|  0.50%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsq\__init__.py:1 <module>
(call)|         1|    0.0330296|    0.0330296|  0.61%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\minpack.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_spectral.py:1 <module>
(call)|         1|    0.0220196|    0.0220196|  0.41%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\nonlin.py:1 <module>
(call)|         1|    0.0650589|    0.0650589|  1.20%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_root.py:1 <module>
(call)|         1|   0.00400281|   0.00400281|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\zeros.py:1 <module>
(call)|         1|   0.00700641|   0.00700641|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_root_scalar.py:1 <module>
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_nnls.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_basinhopping.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_remove_redundancy.py:1 <module>
(call)|         1|   0.00500488|   0.00500488|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_linprog_util.py:1 <module>
(call)|         1|    0.0180171|    0.0180171|  0.33%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_linprog_ip.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_linprog_simplex.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_linprog_rs.py:1 <module>
(call)|         1|    0.0300279|    0.0300279|  0.55%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_linprog.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_lsap.py:12 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_differentialevolution.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_shgo_lib\sobol_seq.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_shgo_lib\triangulation.py:1 <module>
(call)|         1|    0.0120111|    0.0120111|  0.22%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_shgo.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\_dual_annealing.py:6 <module>
(call)|         1|     0.841764|     0.841764| 15.54%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\optimize\__init__.py:1 <module>
(call)|         1|     0.002002|     0.002002|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_quadrature.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\odepack.py:3 <module>
(call)|         1|    0.0030036|    0.0030036|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\quadpack.py:3 <module>
(call)|         1|    0.0100091|    0.0100091|  0.18%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ode.py:2 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_bvp.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\common.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\base.py:1 <module>
(call)|         1|   0.00700641|   0.00700641|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\bdf.py:1 <module>
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\radau.py:1 <module>
(call)|         1|   0.00900841|   0.00900841|  0.17%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\dop853_coefficients.py:1 <module>
(call)|         1|    0.0140123|    0.0140123|  0.26%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\rk.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\lsoda.py:1 <module>
(call)|         1|     0.035032|     0.035032|  0.65%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\ivp.py:1 <module>
(call)|         1|    0.0380347|    0.0380347|  0.70%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_ivp\__init__.py:1 <module>
(call)|         1|   0.00200129|   0.00200129|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\_quad_vec.py:1 <module>
(call)|         1|    0.0790713|    0.0790713|  1.46%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\integrate\__init__.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\misc\doccer.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\misc\common.py:1 <module>
(call)|         1|   0.00900793|   0.00900793|  0.17%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\misc\__init__.py:1 <module>
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_constants.py:1 <module>
(call)|         1|     0.973884|     0.973884| 17.98%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_distn_infrastructure.py:5 <module>
(call)|         1|   0.00600529|   0.00600529|  0.11%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\_fitpack_impl.py:1 <module>
(call)|         1|   0.00300312|   0.00300312|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\_bsplines.py:1 <module>
(call)|         1|    0.0150137|    0.0150137|  0.28%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\fitpack.py:1 <module>
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\polyint.py:1 <module>
(call)|         1|   0.00400352|   0.00400352|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\fitpack2.py:1 <module>
(call)|         1|    0.0370336|    0.0370336|  0.68%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\interpolate.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\rbf.py:1 <module>
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\_cubic.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\ndgriddata.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\_pade.py:1 <module>
(call)|         1|    0.0540493|    0.0540493|  1.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\interpolate\__init__.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_rvs_sampling.py:1 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_tukeylambda_stats.py:1 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_ksstats.py:68 <module>
(call)|         1|      1.97479|      1.97479| 36.45%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_continuous_distns.py:6 <module>
(call)|         1|     0.239217|     0.239217|  4.42%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_discrete_distns.py:5 <module>
(call)|         1|       3.2019|       3.2019| 59.10%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\distributions.py:8 <module>
(call)|         1|   0.00200176|   0.00200176|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_stats_mstats_common.py:1 <module>
(call)|         1|    0.0340314|    0.0340314|  0.63%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\mstats_basic.py:1 <module>
(call)|         1|   0.00300264|   0.00300264|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_wilcoxon_data.py:1 <module>
(call)|         1|   0.00700641|   0.00700641|  0.13%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_hypotests.py:1 <module>
(call)|         1|      3.89153|      3.89153| 71.83%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\stats.py:19 <module>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\contingency.py:1 <module>
(call)|         1|    0.0230207|    0.0230207|  0.42%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\morestats.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_binned_statistic.py:1 <module>
(call)|         1|   0.00300288|   0.00300288|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\kde.py:21 <module>
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\mstats_extras.py:1 <module>
(call)|         1|   0.00400352|   0.00400352|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\mstats.py:1 <module>
(call)|         1|    0.0660596|    0.0660596|  1.22%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_multivariate.py:4 <module>
(call)|         1|      4.01164|      4.01164| 74.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\__init__.py:1 <module>
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|      3056|   0.00300264|   9.8254e-07|  0.06%|
   223|         0|            0|            0|  0.00%|
   224|      3056|   0.00800633|  2.61987e-06|  0.15%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         7|            0|            0|  0.00%|
   233|         7|   0.00100112|  0.000143017|  0.02%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         7|            0|            0|  0.00%|
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:771 is_package
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|       469|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|       469|   0.00100064|  2.13357e-06|  0.02%|
   345|       469|   0.00200129|  4.26713e-06|  0.04%|
   346|       469|   0.00300336|  6.40375e-06|  0.06%|
   347|       469|            0|            0|  0.00%|
   348|       469|   0.00200176|  4.26815e-06|  0.04%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|       469|   0.00300241|  6.40172e-06|  0.06%|
   352|       469|   0.00200224|  4.26917e-06|  0.04%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|
   376|       823|   0.00300336|  3.64928e-06|  0.06%|
   377|         0|            0|            0|  0.00%|
   378|       823|   0.00300288|   3.6487e-06|  0.06%|
   379|       452|   0.00200224|  4.42973e-06|  0.04%|
   380|       452|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|       452|   0.00200129|  4.42762e-06|  0.04%|
(call)|       452|    0.0870829|  0.000192661|  1.61%|# <frozen importlib._bootstrap_external>:424 _get_cached
   383|       823|   0.00200105|  2.43141e-06|  0.04%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|      1282|   0.00600505|  4.68413e-06|  0.11%|
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|
   392|      1282|   0.00600648|  4.68524e-06|  0.11%|
   393|       950|   0.00400376|  4.21449e-06|  0.07%|
   394|         0|            0|            0|  0.00%|
   395|       332|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|       459|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|
   399|       459|   0.00400305|  8.72124e-06|  0.07%|
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|
   406|         7|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|
   408|         7|            0|            0|  0.00%|
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|
   419|         7|            0|            0|  0.00%|
   420|         7|            0|            0|  0.00%|
   421|         7|            0|            0|  0.00%|
   422|         7|            0|            0|  0.00%|
(call)|         7|   0.00100112|  0.000143017|  0.02%|# <frozen importlib._bootstrap>:232 _requires_builtin_wrapper
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|
   429|         7|            0|            0|  0.00%|
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:342 __init__
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|       459|   0.00300264|  6.54171e-06|  0.06%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|       459|   0.00200224|  4.36218e-06|  0.04%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|       459|    0.0030036|  6.54378e-06|  0.06%|
   488|       418|   0.00200152|  4.78833e-06|  0.04%|
   489|       418|    0.0010004|  2.39331e-06|  0.02%|
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|
   509|         0|            0|            0|  0.00%|
   510|       418|    0.0010016|  2.39616e-06|  0.02%|
   511|       418|   0.00200129|  4.78776e-06|  0.04%|
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|
   515|       459|   0.00400329|  8.72176e-06|  0.07%|
   516|       418|   0.00100088|  2.39445e-06|  0.02%|
   517|       418|   0.00500369|  1.19706e-05|  0.09%|
(call)|       418|   0.00200176|  4.78891e-06|  0.04%|# <frozen importlib._bootstrap>:389 parent
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|
   521|       459|   0.00300288|  6.54223e-06|  0.06%|
   522|       459|   0.00100112|  2.18109e-06|  0.02%|
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|         0|            0|            0|  0.00%|
   526|       459|   0.00200176|  4.36114e-06|  0.04%|
   527|       459|            0|            0|  0.00%|
   528|        47|            0|            0|  0.00%|
   529|        47|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|
   533|       459|   0.00100088|  2.18057e-06|  0.02%|
(call)|       459|   0.00400305|  8.72124e-06|  0.07%|# <frozen importlib._bootstrap>:397 has_location
   534|       452|   0.00500441|  1.10717e-05|  0.09%|
   535|       371|   0.00300264|  8.09338e-06|  0.06%|
   536|       371|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|       452|            0|            0|  0.00%|
   541|       452|   0.00800872|  1.77184e-05|  0.15%|
(call)|       452|    0.0970914|  0.000214804|  1.79%|# <frozen importlib._bootstrap>:376 cached
   542|       371|   0.00500464|  1.34896e-05|  0.09%|
   543|       371|   0.00501728|  1.35237e-05|  0.09%|
(call)|       371|   0.00200224|  5.39687e-06|  0.04%|# <frozen importlib._bootstrap>:376 cached
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|
   546|       459|   0.00200176|  4.36114e-06|  0.04%|
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|
   549|       459|   0.00100136|  2.18161e-06|  0.02%|
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|
   552|       459|   0.00200224|  4.36218e-06|  0.04%|
   553|       459|   0.00100136|  2.18161e-06|  0.02%|
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|       459|   0.00500393|  1.09018e-05|  0.09%|
(call)|       371|     0.002002|  5.39623e-06|  0.04%|# <frozen importlib._bootstrap_external>:774 create_module
(call)|        81|    0.0520484|  0.000642573|  0.96%|# <frozen importlib._bootstrap_external>:1099 create_module
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:746 create_module
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|
   560|       459|            0|            0|  0.00%|
   561|       371|   0.00400329|  1.07905e-05|  0.07%|
(call)|       371|     0.002002|  5.39623e-06|  0.04%|# <frozen importlib._bootstrap>:35 _new_module
   562|       459|   0.00701094|  1.52744e-05|  0.13%|
(call)|       459|     0.164166|   0.00035766|  3.03%|# <frozen importlib._bootstrap>:477 _init_module_attrs
   563|       459|   0.00100088|  2.18057e-06|  0.02%|
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|
   568|         0|            0|            0|  0.00%|
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|
   580|         0|            0|            0|  0.00%|
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|
   585|         0|            0|            0|  0.00%|
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|       459|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|       459|   0.00100088|  2.18057e-06|  0.02%|
   653|         0|            0|            0|  0.00%|
   654|       459|   0.00400376|   8.7228e-06|  0.07%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|       459|   0.00400496|  8.72539e-06|  0.07%|
(call)|       459|     0.241242|  0.000525582|  4.45%|# <frozen importlib._bootstrap>:549 module_from_spec
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|         0|            0|            0|  0.00%|
   662|       459|   0.00100064|  2.18005e-06|  0.02%|
   663|       459|            0|            0|  0.00%|
   664|       459|   0.00100136|  2.18161e-06|  0.02%|
   665|       459|   0.00100112|  2.18109e-06|  0.02%|
   666|       459|            0|            0|  0.00%|
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|
   671|       459|   0.00500417|  1.09023e-05|  0.09%|
(call)|       371|      5.37988|     0.014501| 99.30%|# <frozen importlib._bootstrap_external>:777 exec_module
(call)|        81|    0.0790732|  0.000976212|  1.46%|# <frozen importlib._bootstrap_external>:1107 exec_module
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:754 exec_module
   672|         0|            0|            0|  0.00%|
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|
   682|       459|   0.00200152|  4.36062e-06|  0.04%|
   683|       459|   0.00100088|  2.18057e-06|  0.02%|
   684|       459|   0.00900817|  1.96256e-05|  0.17%|
(call)|       459|   0.00300193|  6.54015e-06|  0.06%|# <frozen importlib._bootstrap>:222 _verbose_message
   685|         0|            0|            0|  0.00%|
   686|       459|   0.00300288|  6.54223e-06|  0.06%|
   687|         0|            0|            0|  0.00%|
   688|       459|   0.00100112|  2.18109e-06|  0.02%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|       469|   0.00200105|  4.26663e-06|  0.04%|
   726|         0|            0|            0|  0.00%|
   727|       469|   0.00300264|  6.40223e-06|  0.06%|
   728|       428|    0.0010016|  2.34018e-06|  0.02%|
   729|        41|            0|            0|  0.00%|
   730|         7|            0|            0|  0.00%|
(call)|         7|   0.00100112|  0.000143017|  0.02%|# <frozen importlib._bootstrap>:406 spec_from_loader
   731|         0|            0|            0|  0.00%|
   732|        34|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|
   746|         7|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|
   748|         0|            0|            0|  0.00%|
   749|         7|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|
   752|         7|            0|            0|  0.00%|
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
   753|         0|            0|            0|  0.00%|
   754|         7|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         7|            0|            0|  0.00%|
(call)|         7|            0|            0|  0.00%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         7|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|
   775|         7|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|
   793|         0|            0|            0|  0.00%|
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|       462|    0.0010016|  2.16796e-06|  0.02%|
   801|         0|            0|            0|  0.00%|
   802|       462|   0.00200248|  4.33437e-06|  0.04%|
   803|         0|            0|            0|  0.00%|
   804|         0|            0|            0|  0.00%|
   805|       462|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|
   857|         0|            0|            0|  0.00%|
   858|         0|            0|            0|  0.00%|
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|
   863|      1413|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|
   865|      1413|   0.00100136|  7.08675e-07|  0.02%|
   866|         0|            0|            0|  0.00%|
   867|      1413|   0.00300264|  2.12501e-06|  0.06%|
   868|         0|            0|            0|  0.00%|
   869|      1413|   0.00500488|  3.54203e-06|  0.09%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|
   878|         0|            0|            0|  0.00%|
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|
   881|        20|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|        20|            0|            0|  0.00%|
(call)|        10|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\pkg_resources\extern\__init__.py:23 find_module
(call)|        10|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\pkg_resources\_vendor\six.py:184 find_module
   885|        20|            0|            0|  0.00%|
   886|        20|            0|            0|  0.00%|
   887|         0|            0|            0|  0.00%|
   888|         0|            0|            0|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|       469|   0.00100136|  2.13509e-06|  0.02%|
   891|         0|            0|            0|  0.00%|
   892|       469|   0.00200367|  4.27222e-06|  0.04%|
   893|       469|   0.00100064|  2.13357e-06|  0.02%|
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|
   897|         0|            0|            0|  0.00%|
   898|       469|   0.00400352|   8.5363e-06|  0.07%|
   899|         0|            0|            0|  0.00%|
   900|         0|            0|            0|  0.00%|
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|
   903|         0|            0|            0|  0.00%|
   904|       469|   0.00400376|  8.53681e-06|  0.07%|
   905|      1423|   0.00500464|  3.51697e-06|  0.09%|
   906|      1413|     0.017015|  1.20417e-05|  0.31%|
(call)|      1413|   0.00100136|  7.08675e-07|  0.02%|# <frozen importlib._bootstrap>:863 __enter__
   907|      1413|   0.00700712|  4.95904e-06|  0.13%|
   908|      1413|   0.00500369|  3.54118e-06|  0.09%|
   909|        20|            0|            0|  0.00%|
   910|        20|            0|            0|  0.00%|
(call)|        20|            0|            0|  0.00%|# <frozen importlib._bootstrap>:881 _find_spec_legacy
   911|        20|   0.00100064|  5.00321e-05|  0.02%|
   912|        20|   0.00100088|  5.00441e-05|  0.02%|
(call)|        20|            0|            0|  0.00%|# <frozen importlib._bootstrap>:867 __exit__
   913|         0|            0|            0|  0.00%|
   914|      1393|    0.0210197|  1.50895e-05|  0.39%|
(call)|       469|   0.00700641|   1.4939e-05|  0.13%|# <frozen importlib._bootstrap>:725 find_spec
(call)|      1393|   0.00800753|   5.7484e-06|  0.15%|# <frozen importlib._bootstrap>:867 __exit__
(call)|       462|   0.00300407|  6.50232e-06|  0.06%|# <frozen importlib._bootstrap>:800 find_spec
(call)|       462|     0.424361|   0.00091853|  7.83%|# <frozen importlib._bootstrap_external>:1334 find_spec
   915|      1393|   0.00200152|  1.43684e-06|  0.04%|
   916|         0|            0|            0|  0.00%|
   917|       459|     0.004004|  8.72332e-06|  0.07%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|       459|   0.00500393|  1.09018e-05|  0.09%|
   933|         0|            0|            0|  0.00%|
   934|        10|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|
   949|         0|            0|            0|  0.00%|
   950|         0|            0|            0|  0.00%|
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|
   955|         0|            0|            0|  0.00%|
   956|       477|    0.0010016|  2.09978e-06|  0.02%|
   957|       477|   0.00400352|  8.39313e-06|  0.07%|
   958|       477|    0.0050087|  1.05004e-05|  0.09%|
   959|       477|            0|            0|  0.00%|
   960|       436|   0.00200224|  4.59229e-06|  0.04%|
   961|        11|            0|            0|  0.00%|
(call)|        11|     0.597542|     0.054322| 11.03%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
   962|         0|            0|            0|  0.00%|
   963|       430|            0|            0|  0.00%|
   964|         2|            0|            0|  0.00%|
   965|       428|            0|            0|  0.00%|
   966|       428|   0.00200224|  4.67813e-06|  0.04%|
   967|       428|            0|            0|  0.00%|
   968|         0|            0|            0|  0.00%|
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|
   971|       469|   0.00500464|  1.06709e-05|  0.09%|
(call)|       469|     0.523454|   0.00111611|  9.66%|# <frozen importlib._bootstrap>:890 _find_spec
   972|       469|   0.00500607|  1.06739e-05|  0.09%|
   973|        10|            0|            0|  0.00%|
   974|         0|            0|            0|  0.00%|
   975|       459|   0.00400233|  8.71968e-06|  0.07%|
(call)|       459|      5.38288|    0.0117274| 99.35%|# <frozen importlib._bootstrap>:650 _load_unlocked
   976|       459|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|       426|   0.00100064|  2.34893e-06|  0.02%|
   979|       426|    0.0010004|  2.34837e-06|  0.02%|
   980|       459|   0.00200272|  4.36322e-06|  0.04%|
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|
   986|       477|   0.00700688|  1.46895e-05|  0.13%|
   987|         0|            0|            0|  0.00%|
   988|       477|   0.00800776|  1.67878e-05|  0.15%|
(call)|       477|   0.00300145|  6.29235e-06|  0.06%|# <frozen importlib._bootstrap>:143 __init__
(call)|       477|    0.0740631|  0.000155268|  1.37%|# <frozen importlib._bootstrap>:147 __enter__
   989|       477|   0.00300312|  6.29585e-06|  0.06%|
   990|       477|            0|            0|  0.00%|
   991|       477|    0.0140128|   2.9377e-05|  0.26%|
(call)|       477|      5.39189|    0.0113038| 99.52%|# <frozen importlib._bootstrap>:956 _find_and_load_unlocked
(call)|       477|    0.0220349|  4.61947e-05|  0.41%|# <frozen importlib._bootstrap>:151 __exit__
(call)|       475|    0.0120103|  2.52849e-05|  0.22%|# <frozen importlib._bootstrap>:176 cb
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|
   997|         0|            0|            0|  0.00%|
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|
  1008|         0|            0|            0|  0.00%|
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|
  1013|         0|            0|            0|  0.00%|
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|
  1017|       612|   0.00900888|  1.47204e-05|  0.17%|
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|
  1021|         0|            0|            0|  0.00%|
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|
  1027|      2364|   0.00700712|   2.9641e-06|  0.13%|
  1028|      1752|   0.00800753|  4.57051e-06|  0.15%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|      1752|     0.004004|  2.28539e-06|  0.07%|
  1036|         9|            0|            0|  0.00%|
  1037|        14|   0.00100088|  7.14915e-05|  0.02%|
(call)|         7|    0.0110092|   0.00157275|  0.20%|# <frozen importlib._bootstrap>:1017 _handle_fromlist
  1038|         7|            0|            0|  0.00%|
  1039|      1743|    0.0110109|   6.3172e-06|  0.20%|
  1040|       134|     0.002002|  1.49403e-05|  0.04%|
  1041|       134|            0|            0|  0.00%|
  1042|       134|   0.00300241|   2.2406e-05|  0.06%|
(call)|       134|      5.20172|    0.0388188| 96.01%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
  1043|         2|            0|            0|  0.00%|
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|
  1047|         2|            0|            0|  0.00%|
  1048|         2|            0|            0|  0.00%|
  1049|         4|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|       612|   0.00500512|   8.1783e-06|  0.09%|
File: <string>
File duration: 0.00600481s (0.11%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|      1146|   0.00600481|   5.2398e-06|  0.11%|
File: <frozen zipimport>
File duration: 0.00300431s (0.06%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|
    63|        47|   0.00100183|  2.13156e-05|  0.02%|
    64|        47|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|        47|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|        47|            0|            0|  0.00%|
    70|        47|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|        47|   0.00100112|  2.13004e-05|  0.02%|
    73|         0|            0|            0|  0.00%|
    74|        47|   0.00100136|  2.13055e-05|  0.02%|
    75|        47|            0|            0|  0.00%|
(call)|        47|     0.002002|  4.25958e-05|  0.04%|# <frozen importlib._bootstrap_external>:80 _path_stat
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|
    86|        47|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|
    88|        47|            0|            0|  0.00%|
File: <string>_4
File duration: 0.00200224s (0.04%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|       712|   0.00200224|  2.81213e-06|  0.04%|
File: main.py
File duration: 0.00200129s (0.04%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|import numpy as np
(call)|         1|      1.02593|      1.02593| 18.94%|# <frozen importlib._bootstrap>:986 _find_and_load
     2|         1|            0|            0|  0.00%|from scipy import stats
(call)|         1|      0.35332|      0.35332|  6.52%|# <frozen importlib._bootstrap>:986 _find_and_load
(call)|         1|      4.01464|      4.01464| 74.10%|# <frozen importlib._bootstrap>:1017 _handle_fromlist
     3|         1|            0|            0|  0.00%|from collections import namedtuple
(call)|         1|            0|            0|  0.00%|# <frozen importlib._bootstrap>:1017 _handle_fromlist
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|# Source: https://stackoverflow.com/questions/37676539/numpy-padding-matrix-of-different-row-size
     6|         2|            0|            0|  0.00%|def pad_with_nan(M):
     7|         0|            0|            0|  0.00%|    """Appends the minimal required amount of zeroes at the end of each
     8|         0|            0|            0|  0.00%|     array in the jagged array `M`, such that `M` looses its jagedness."""
     9|         0|            0|            0|  0.00%|
    10|         9|   0.00100088|  0.000111209|  0.02%|    maxlen = max(len(r) for r in M)
(call)|         4|   0.00100088|   0.00025022|  0.02%|# main.py:10 <genexpr>
    11|         0|            0|            0|  0.00%|
    12|         1|            0|            0|  0.00%|    Z = np.full((len(M), maxlen), np.nan, dtype=float)
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\numeric.py:268 full
    13|         4|            0|            0|  0.00%|    for enu, row in enumerate(M):
    14|         3|            0|            0|  0.00%|        Z[enu, :len(row)] = row
    15|         1|            0|            0|  0.00%|    return Z
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         1|            0|            0|  0.00%|def alexander_govern_orig(a):
    19|         0|            0|            0|  0.00%|	a = np.asarray(a)
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|	#Based on ttest_1samp
    23|         0|            0|            0|  0.00%|	#Works as expected in multiple cases.
    24|         0|            0|            0|  0.00%|	def calc_t(a):
    25|         0|            0|            0|  0.00%|		n = a.shape[1]
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|		df = n - 1
    28|         0|            0|            0|  0.00%|		X = np.nanmean(a, 1)
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|		s = np.nanvar(a, 1, ddof=1)
    31|         0|            0|            0|  0.00%|		S = np.sqrt(s / n)
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|		w = 1/S**2 / np.sum(1/S**2)	#Weights
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|		u = np.sum(w * X)
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|		t = (X - u) / S
    38|         0|            0|            0|  0.00%|		print(X, u, S)
    39|         0|            0|            0|  0.00%|		return t, df
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|	#Below follows nomenclature in the evaluating AG paper
    42|         0|            0|            0|  0.00%|	def calc_zi(ti, vi):
    43|         0|            0|            0|  0.00%|		a = vi - .5
    44|         0|            0|            0|  0.00%|		b = 48*a**2
    45|         0|            0|            0|  0.00%|		c=(a*np.log(1 + ti**2/vi))**.5
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|		#Calc Z. tX is Term in equation
    48|         0|            0|            0|  0.00%|		t0 = c
    49|         0|            0|            0|  0.00%|		t1 = (c**3 + 3*c) / b
    50|         0|            0|            0|  0.00%|		t3 = (4*c**7 + 33*c**5 + 240*c**3 + 855*c) / (10*b**2 + 8*b*c**4 + 1000*b)
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|		return t0 + t1 - t3
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|	t, v = calc_t(a) # T is arr of T stats, v is dimension - 1
    57|         0|            0|            0|  0.00%|	print(t,v)
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|	z = calc_zi(t, v)
    60|         0|            0|            0|  0.00%|	print(z)
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|	A = np.sum(z**2)
    63|         0|            0|            0|  0.00%|	print(A)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|	return A
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         2|            0|            0|  0.00%|def alexander_govern_nan_fill(a):
    70|         1|            0|            0|  0.00%|	a = pad_with_nan(a)
(call)|         1|   0.00100088|   0.00100088|  0.02%|# main.py:6 pad_with_nan
    71|         1|            0|            0|  0.00%|	a = np.asarray(a)
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_asarray.py:14 asarray
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|	#Based on ttest_1samp
    75|         0|            0|            0|  0.00%|	#Works as expected in multiple cases.
    76|         2|            0|            0|  0.00%|	def calc_t(a):
    77|         0|            0|            0|  0.00%|		#https://stackoverflow.com/questions/44525825/count-number-of-non-nan-values-in-array
    78|         1|            0|            0|  0.00%|		n = (~np.isnan(a)).sum(1)
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_methods.py:45 _sum
    79|         1|            0|            0|  0.00%|		print(n)
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\arrayprint.py:1473 _array_str_implementation
    80|         0|            0|            0|  0.00%|
    81|         1|            0|            0|  0.00%|		df = n - 1
    82|         1|            0|            0|  0.00%|		X = np.nanmean(a, 1)
(call)|         1|   0.00100112|   0.00100112|  0.02%|# <__array_function__ internals>_246:2 nanmean
    83|         0|            0|            0|  0.00%|
    84|         1|            0|            0|  0.00%|		s = np.nanvar(a, 1, ddof=1)
(call)|         1|   0.00200152|   0.00200152|  0.04%|# <__array_function__ internals>_250:2 nanvar
    85|         1|            0|            0|  0.00%|		S = np.sqrt(s / n)
    86|         0|            0|            0|  0.00%|
    87|         1|            0|            0|  0.00%|		w = 1/S**2 / np.sum(1/S**2)	#Weights
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
    88|         0|            0|            0|  0.00%|
    89|         1|            0|            0|  0.00%|		u = np.sum(w * X)
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
    90|         0|            0|            0|  0.00%|
    91|         1|            0|            0|  0.00%|		t = (X - u) / S
    92|         1|    0.0010004|    0.0010004|  0.02%|		print(X, u, S)
(call)|         2|   0.00400472|   0.00200236|  0.07%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\arrayprint.py:1473 _array_str_implementation
    93|         1|            0|            0|  0.00%|		return t, df
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|	#Below follows nomenclature in the evaluating AG paper
    96|         2|            0|            0|  0.00%|	def calc_zi(ti, vi):
    97|         1|            0|            0|  0.00%|		a = vi - .5
    98|         1|            0|            0|  0.00%|		b = 48*a**2
    99|         1|            0|            0|  0.00%|		c=(a*np.log(1 + ti**2/vi))**.5
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|		#Calc Z. tX is Term in equation
   102|         1|            0|            0|  0.00%|		t0 = c
   103|         1|            0|            0|  0.00%|		t1 = (c**3 + 3*c) / b
   104|         1|            0|            0|  0.00%|		t3 = (4*c**7 + 33*c**5 + 240*c**3 + 855*c) / (10*b**2 + 8*b*c**4 + 1000*b)
   105|         0|            0|            0|  0.00%|
   106|         1|            0|            0|  0.00%|		return t0 + t1 - t3
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|
   110|         1|            0|            0|  0.00%|	t, v = calc_t(a) # T is arr of T stats, v is dimension - 1
(call)|         1|   0.00900841|   0.00900841|  0.17%|# main.py:76 calc_t
   111|         1|            0|            0|  0.00%|	print(t,v)
(call)|         2|   0.00300288|   0.00150144|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\arrayprint.py:1473 _array_str_implementation
   112|         0|            0|            0|  0.00%|
   113|         1|            0|            0|  0.00%|	z = calc_zi(t, v)
(call)|         1|            0|            0|  0.00%|# main.py:96 calc_zi
   114|         1|            0|            0|  0.00%|	print(z)
(call)|         1|   0.00300264|   0.00300264|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\arrayprint.py:1473 _array_str_implementation
   115|         0|            0|            0|  0.00%|
   116|         1|            0|            0|  0.00%|	A = np.sum(z**2)
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
   117|         1|            0|            0|  0.00%|	print(A)
   118|         0|            0|            0|  0.00%|
   119|         1|            0|            0|  0.00%|	return A
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         1|            0|            0|  0.00%|AlexanderGovernResult = namedtuple("AlexanderGovernResult", ("statistic",
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\collections\__init__.py:313 namedtuple
   123|         0|            0|            0|  0.00%|                                                             "pvalue"))
   124|         0|            0|            0|  0.00%|
   125|         2|            0|            0|  0.00%|def AlexanderGovern(*args):
   126|         1|            0|            0|  0.00%|    if len(args) < 2:
   127|         0|            0|            0|  0.00%|        raise TypeError(f"2 or more inputs required, got {len(args)}")
   128|         0|            0|            0|  0.00%|
   129|         6|            0|            0|  0.00%|    args = [np.asarray(arg, dtype=float) for arg in args]
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_asarray.py:14 asarray
(call)|         1|            0|            0|  0.00%|# main.py:129 <listcomp>
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|    # The following formula numbers reference the equation described on
   132|         0|            0|            0|  0.00%|    # page 92 by Alexander, Govern. Formulas 5, 6, and 7 describe other
   133|         0|            0|            0|  0.00%|    # tests that serve as the basis for equation (8) but are not needed
   134|         0|            0|            0|  0.00%|    # to perform the test.
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|    # (1) determine standard errors for each sample
   137|         6|            0|            0|  0.00%|    standard_errors = [stats.sem(arg) for arg in args]
(call)|         3|   0.00300264|   0.00100088|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\stats.py:2365 sem
(call)|         1|   0.00300264|   0.00300264|  0.06%|# main.py:137 <listcomp>
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|    # precalculate weighted sum for following step
   140|         1|            0|            0|  0.00%|    weight_denom = np.sum(1 / np.square(standard_errors))
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|    # (2) define a weight for each samlple
   143|         6|            0|            0|  0.00%|    weights = [(1 / s**2) / weight_denom for s in standard_errors]
(call)|         1|            0|            0|  0.00%|# main.py:143 <listcomp>
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|    # precalculate means of each sample
   146|         6|            0|            0|  0.00%|    means = np.asarray([np.mean(arg) for arg in args])
(call)|         3|   0.00100112|  0.000333707|  0.02%|# <__array_function__ internals>_58:2 mean
(call)|         1|   0.00100112|   0.00100112|  0.02%|# main.py:146 <listcomp>
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\_asarray.py:14 asarray
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|    # (3) determine variance-weighted estimate of the common mean
   149|         1|            0|            0|  0.00%|    var_w = np.sum(weights * means)
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|    # (4) determine one-sample t statistic for each group
   152|         6|            0|            0|  0.00%|    t_stats = [((mean - var_w)/s) for mean, s in zip(means, standard_errors)]
(call)|         1|            0|            0|  0.00%|# main.py:152 <listcomp>
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|    # calculate parameters to be used in transformation
   155|         6|            0|            0|  0.00%|    v = [len(k) - 1 for k in args]
(call)|         1|            0|            0|  0.00%|# main.py:155 <listcomp>
   156|         6|            0|            0|  0.00%|    a = [v_i - .5 for v_i in v]
(call)|         1|            0|            0|  0.00%|# main.py:156 <listcomp>
   157|         6|            0|            0|  0.00%|    b = [48 * a_i**2 for a_i in a]
(call)|         1|            0|            0|  0.00%|# main.py:157 <listcomp>
   158|        10|            0|            0|  0.00%|    c = [((a_i * np.log(1 + (t_i ** 2)/v_i))**.5)
(call)|         1|            0|            0|  0.00%|# main.py:158 <listcomp>
   159|         1|            0|            0|  0.00%|         for a_i, t_i, v_i in zip(a, t_stats, v)]
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|    # (8) perform a normalizing transformation on t statistic
   162|        13|            0|            0|  0.00%|    z = [(c_i + ((c_i**3 + 3*c_i)/b_i) -
(call)|         1|            0|            0|  0.00%|# main.py:162 <listcomp>
   163|         6|            0|            0|  0.00%|          ((4*c_i**7 + 33*c_i**5 + 240*c_i**3 + 855*c_i) /
   164|         3|            0|            0|  0.00%|           (10*b_i**2 + 8*b_i*c_i**4 + 1000*b_i)))
   165|         1|            0|            0|  0.00%|         for c_i, b_i in zip(c, b)]
   166|         0|            0|            0|  0.00%|
   167|         0|            0|            0|  0.00%|    # (9) calculate statistic
   168|         1|            0|            0|  0.00%|    A = np.sum(np.square(z))
(call)|         1|            0|            0|  0.00%|# <__array_function__ internals>_45:2 sum
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|    # "[the p value is determined from] central chi-square random deviates
   171|         0|            0|            0|  0.00%|    # with n_i - 1 degrees of freedom". Alexander, Govern (94)
   172|         1|            0|            0|  0.00%|    p = stats.distributions.chi2.sf(A, len(args) - 1)
(call)|         1|   0.00300217|   0.00300217|  0.06%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\stats\_distn_infrastructure.py:1902 sf
   173|         1|            0|            0|  0.00%|    return AlexanderGovernResult(A, p)
(call)|         1|            0|            0|  0.00%|# <string>_198:1 __new__
   174|         0|            0|            0|  0.00%|
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|
   177|         2|            0|            0|  0.00%|y = [482.43, 484.36, 488.84, 495.15, 495.24, 502.69, 504.62, 518.29, 519.10,
   178|         1|            0|            0|  0.00%|524.10, 524.12, 531.18, 548.42, 572.10, 584.68, 609.09, 609.53, 666.63, 676.40]
   179|         0|            0|            0|  0.00%|
   180|         2|            0|            0|  0.00%|m = [335.59, 338.43, 353.54, 404.27, 437.5, 469.01, 485.85, 487.3, 493.08,
   181|         1|            0|            0|  0.00%|494.31, 499.1, 886.41]
   182|         0|            0|            0|  0.00%|
   183|         2|            0|            0|  0.00%|o = [519.01, 528.5, 530.23, 536.03, 538.56, 538.83, 557.24, 558.61, 558.95,
   184|         1|            0|            0|  0.00%|565.43, 586.39, 594.69, 629.22, 645.69, 691.84]
   185|         0|            0|            0|  0.00%|
   186|         1|            0|            0|  0.00%|a = [y,m,o]
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|#alexander_govern(a)
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|#alexander_govern([[1,2,3,4,5], [1,2,3,4,5]])
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|#print(np.asarray(m) * 2)
   194|         0|            0|            0|  0.00%|
   195|         1|            0|            0|  0.00%|alexander_govern_nan_fill(a)
(call)|         1|    0.0160148|    0.0160148|  0.30%|# main.py:69 alexander_govern_nan_fill
   196|         1|            0|            0|  0.00%|print(AlexanderGovern(y,m,o))
(call)|         1|   0.00700593|   0.00700593|  0.13%|# main.py:125 AlexanderGovern
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\collections\__init__.py:419 __repr__
   197|         0|            0|            0|  0.00%|#print(pad_with_nan(a))
File: <__array_function__ internals>_12
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         7|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         5|   0.00100112|  0.000200224|  0.02%|
(call)|         5|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\multiarray.py:1043 copyto
     5|        10|            0|            0|  0.00%|
     6|         5|            0|            0|  0.00%|
File: <string>_61
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|   0.00100112|   0.00050056|  0.02%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_66
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|   0.00100112|   0.00100112|  0.02%|
File: <string>_133
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|   0.00100112|   0.00050056|  0.02%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_137
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|   0.00100112|   0.00050056|  0.02%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_112
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|   0.00100112|   0.00050056|  0.02%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_170
File duration: 0.00100112s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|   0.00100112|   0.00050056|  0.02%|
File: <string>_117
File duration: 0.00100088s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|   0.00100088|   0.00100088|  0.02%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <__array_function__ internals>_219
File duration: 0.00100088s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|   0.00100088|  0.000500441|  0.02%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_22
File duration: 0.00100064s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         4|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         2|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:90 _take_dispatcher
     5|         4|   0.00100064|  0.000250161|  0.02%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:94 take
     6|         2|            0|            0|  0.00%|
File: <string>_171
File duration: 0.00100064s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|   0.00100064|  0.000500321|  0.02%|
File: <__array_function__ internals>_240
File duration: 0.000987768s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|  0.000987768|  0.000493884|  0.02%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <string>_6
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|       252|            0|            0|  0.00%|
File: <__array_function__ internals>_45
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|        16|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|        14|            0|            0|  0.00%|
(call)|        14|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2100 _sum_dispatcher
     5|        28|            0|            0|  0.00%|
(call)|        14|   0.00200129|  0.000142949|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2105 sum
     6|        14|            0|            0|  0.00%|
File: <string>_7
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        46|            0|            0|  0.00%|
File: <__array_function__ internals>_51
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         8|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         6|            0|            0|  0.00%|
(call)|         6|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2709 _amin_dispatcher
     5|        12|            0|            0|  0.00%|
(call)|         6|   0.00100064|  0.000166774|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2714 amin
     6|         6|            0|            0|  0.00%|
File: <__array_function__ internals>_50
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         8|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         6|            0|            0|  0.00%|
(call)|         6|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2584 _amax_dispatcher
     5|        12|            0|            0|  0.00%|
(call)|         6|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2589 amax
     6|         6|            0|            0|  0.00%|
File: <__array_function__ internals>_66
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         7|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         5|            0|            0|  0.00%|
(call)|         5|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\shape_base.py:20 _atleast_1d_dispatcher
     5|        10|            0|            0|  0.00%|
(call)|         5|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\shape_base.py:24 atleast_1d
     6|         5|            0|            0|  0.00%|
File: <__array_function__ internals>_216
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         6|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         4|            0|            0|  0.00%|
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1585 _trim_zeros
     5|         8|            0|            0|  0.00%|
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1589 trim_zeros
     6|         4|            0|            0|  0.00%|
File: <__array_function__ internals>_40
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         6|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         4|            0|            0|  0.00%|
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1701 _ravel_dispatcher
     5|         8|            0|            0|  0.00%|
(call)|         4|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1705 ravel
     6|         4|            0|            0|  0.00%|
File: <__array_function__ internals>_59
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         5|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         3|            0|            0|  0.00%|
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:3376 _std_dispatcher
     5|         6|            0|            0|  0.00%|
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:3381 std
     6|         3|            0|            0|  0.00%|
File: <__array_function__ internals>_218
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         5|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         3|            0|            0|  0.00%|
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1697 _place_dispatcher
     5|         6|            0|            0|  0.00%|
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1701 place
     6|         3|            0|            0|  0.00%|
File: <__array_function__ internals>_58
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         5|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         3|            0|            0|  0.00%|
(call)|         3|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:3265 _mean_dispatcher
     5|         6|            0|            0|  0.00%|
(call)|         3|   0.00100112|  0.000333707|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:3269 mean
     6|         3|            0|            0|  0.00%|
File: <__array_function__ internals>_46
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         4|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         2|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2245 _any_dispatcher
     5|         4|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:2249 any
     6|         2|            0|            0|  0.00%|
File: <__array_function__ internals>_41
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         4|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         2|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1812 _nonzero_dispatcher
     5|         4|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1816 nonzero
     6|         2|            0|            0|  0.00%|
File: <__array_function__ internals>_217
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         4|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         2|            0|            0|  0.00%|
(call)|         2|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1641 _extract_dispatcher
     5|         4|            0|            0|  0.00%|
(call)|         2|   0.00100064|  0.000500321|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\function_base.py:1645 extract
     6|         2|            0|            0|  0.00%|
File: <string>_11
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        10|            0|            0|  0.00%|
File: <__array_function__ internals>_0
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\multiarray.py:143 concatenate
     5|         2|            0|            0|  0.00%|
     6|         1|            0|            0|  0.00%|
File: <__array_function__ internals>_250
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\nanfunctions.py:1416 _nanvar_dispatcher
     5|         2|            0|            0|  0.00%|
(call)|         1|   0.00200152|   0.00200152|  0.04%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\nanfunctions.py:1421 nanvar
     6|         1|            0|            0|  0.00%|
File: <__array_function__ internals>_246
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\nanfunctions.py:858 _nanmean_dispatcher
     5|         2|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\lib\nanfunctions.py:862 nanmean
     6|         1|            0|            0|  0.00%|
File: <decorator-gen-1>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         5|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
(call)|         3|   0.00500464|   0.00166821|  0.09%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\scipy\_lib\decorator.py:223 decorate
File: <__array_function__ internals>_42
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
     4|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1911 _shape_dispatcher
     5|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\site-packages\numpy\core\fromnumeric.py:1915 shape
     6|         1|            0|            0|  0.00%|
File: <string>_3
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         6|            0|            0|  0.00%|
File: <string>_37
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         3|            0|            0|  0.00%|
     3|         1|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_1
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
     2|         1|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\abc.py:89 register
     5|         1|            0|            0|  0.00%|
File: <string>_104
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_50
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_70
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_132
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_63
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_53
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_56
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_33
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_59
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_95
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_30
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_71
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_29
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_98
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_107
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_120
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_125
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_102
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_36
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_121
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_116
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_134
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_32
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_60
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_23
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_39
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_22
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_27
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_78
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_48
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_40
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_111
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_62
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_94
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_54
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_86
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_52
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_65
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_42
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_26
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_88
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_51
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_58
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_100
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_90
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_105
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_64
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_34
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_108
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_129
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_24
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_91
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_38
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_85
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_43
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_92
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_101
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_118
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_126
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_131
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_114
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_103
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_106
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_45
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_47
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_79
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_28
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_115
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_136
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_124
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_109
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_46
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_97
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_127
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_198
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         4|            0|            0|  0.00%|
File: <string>_83
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_73
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_57
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_89
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_55
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_31
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_135
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_76
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_74
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_68
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_99
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_44
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_75
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_122
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_130
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_128
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_77
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_25
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_93
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_41
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_123
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_72
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_113
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_69
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_80
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_35
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_87
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_67
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_81
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_96
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_49
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_82
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_110
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_119
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <string>_84
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         1|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         1|            0|            0|  0.00%|
File: <__array_function__ internals>_115
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_23
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_297
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_280
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_169
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_69
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_243
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_28
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_164
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_241
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_99
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_248
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_75
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|   0.00100017|   0.00100017|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_271
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_138
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_137
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_112
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_93
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_235
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_195
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_233
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_252
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_174
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_262
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_14
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_131
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_68
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_139
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_166
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_211
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_65
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_141
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_37
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_205
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_194
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_154
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_84
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_56
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_178
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_92
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_177
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_269
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_173
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_105
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_237
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_203
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_215
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_265
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_170
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_119
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_230
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_182
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_98
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_114
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_24
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_242
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_292
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_156
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_25
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_39
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_48
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_278
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_74
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_55
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_285
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_72
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_155
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_47
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_163
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_91
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_30
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_34
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_294
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_29
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_254
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_113
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_198
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_90
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_160
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_6
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_189
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_20
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_206
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_213
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_304
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_121
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_249
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_267
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_144
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_303
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_168
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_82
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_142
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_204
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_49
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_227
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_2
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_71
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_270
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_179
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_79
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_301
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_275
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_302
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_192
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_220
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_129
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_260
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_13
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_107
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_274
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_80
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_247
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_87
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_124
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_175
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_57
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_88
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_143
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_62
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_27
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100136|   0.00100136|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_312
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_86
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_283
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_261
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_157
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_208
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_132
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_277
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_161
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_7
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_26
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_159
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_120
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_102
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_199
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_231
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_268
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_116
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_118
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_186
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_256
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_272
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_190
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_85
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_266
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_257
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_171
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_229
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_9
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_263
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_264
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_188
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_95
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_306
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_295
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_284
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_259
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_94
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_279
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_224
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_221
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_291
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_197
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_151
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_54
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_287
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_165
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_104
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_245
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_108
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_281
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_172
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_110
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_130
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_53
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_232
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_64
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_83
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_202
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_10
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_122
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_184
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_191
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_60
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_125
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_223
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_38
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_180
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_200
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_305
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_67
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_152
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_313
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_140
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_77
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_16
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_17
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_73
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_145
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_214
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_187
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_111
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_234
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_36
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_158
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_293
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_253
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_239
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_106
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_135
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_70
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_78
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_5
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_183
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_52
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|    0.0010004|    0.0010004|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_81
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_136
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_127
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_96
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_299
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_117
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_307
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_212
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_147
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_150
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_176
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_314
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_181
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_21
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_61
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_123
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_167
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_126
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_33
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_100
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_4
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_8
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_236
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_44
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_31
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_109
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_19
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_207
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_35
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_15
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_185
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_290
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_228
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_309
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_300
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_1
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_310
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_3
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100064|   0.00100064|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_209
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_210
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_43
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_18
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_311
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_225
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_133
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_238
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_226
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_286
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_289
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100112|   0.00100112|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_148
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_222
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_97
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_251
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_288
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_244
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_296
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100183|   0.00100183|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_63
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_255
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_196
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_308
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_276
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_89
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_103
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_76
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_32
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_298
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_153
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_273
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_11
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_258
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_134
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_149
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_282
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_193
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|   0.00100088|   0.00100088|  0.02%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_146
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_101
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_128
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_162
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <__array_function__ internals>_201
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         2|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:64 wraps
     3|         1|            0|            0|  0.00%|
(call)|         1|            0|            0|  0.00%|# c:\users\domo2\appdata\local\programs\python\python38-32\lib\functools.py:34 update_wrapper
File: <string>_155
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_14
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_190
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-4>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_166
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-7>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_197
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_146
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_158
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_9
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_138
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_154
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-5>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_169
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_191
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_18
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_148
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_141
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_149
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_163
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_16
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <decorator-gen-9>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-10>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_151
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_5
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_161
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_12
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_172
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_2
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_180
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_181
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_182
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_20
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_188
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-8>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_193
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_162
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_144
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_195
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_189
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_184
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_140
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_153
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_194
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-6>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_187
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_0
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_176
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_175
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_186
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_19
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_15
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_10
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_185
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_168
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_179
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_150
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_174
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_178
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_157
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_196
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_192
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_173
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_21
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_159
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_139
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_152
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-0>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_183
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_13
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_145
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-3>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_17
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|r"""
     2|         2|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Nonlinear solvers
     4|         0|            0|            0|  0.00%|-----------------
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|.. currentmodule:: scipy.optimize
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|This is a collection of general-purpose nonlinear multidimensional
     9|         0|            0|            0|  0.00%|solvers. These solvers find *x* for which *F(x) = 0*. Both *x*
    10|         0|            0|            0|  0.00%|and *F* can be multidimensional.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|Routines
    13|         0|            0|            0|  0.00%|~~~~~~~~
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|Large-scale nonlinear solvers:
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|.. autosummary::
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|   newton_krylov
    20|         0|            0|            0|  0.00%|   anderson
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|General nonlinear solvers:
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|.. autosummary::
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|   broyden1
    27|         0|            0|            0|  0.00%|   broyden2
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|Simple iterations:
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|.. autosummary::
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|   excitingmixing
    34|         0|            0|            0|  0.00%|   linearmixing
    35|         0|            0|            0|  0.00%|   diagbroyden
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|Examples
    39|         0|            0|            0|  0.00%|~~~~~~~~
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|**Small problem**
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|>>> def F(x):
    44|         0|            0|            0|  0.00%|...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
    45|         0|            0|            0|  0.00%|>>> import scipy.optimize
    46|         0|            0|            0|  0.00%|>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
    47|         0|            0|            0|  0.00%|>>> x
    48|         0|            0|            0|  0.00%|array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
    49|         0|            0|            0|  0.00%|>>> np.cos(x) + x[::-1]
    50|         0|            0|            0|  0.00%|array([ 1.,  2.,  3.,  4.])
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|**Large problem**
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|Suppose that we needed to solve the following integrodifferential
    56|         0|            0|            0|  0.00%|equation on the square :math:`[0,1]\times[0,1]`:
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|.. math::
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|   \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
    63|         0|            0|            0|  0.00%|the square.
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|The solution can be found using the `newton_krylov` solver:
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|.. plot::
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|   import numpy as np
    70|         0|            0|            0|  0.00%|   from scipy.optimize import newton_krylov
    71|         0|            0|            0|  0.00%|   from numpy import cosh, zeros_like, mgrid, zeros
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|   # parameters
    74|         0|            0|            0|  0.00%|   nx, ny = 75, 75
    75|         0|            0|            0|  0.00%|   hx, hy = 1./(nx-1), 1./(ny-1)
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|   P_left, P_right = 0, 0
    78|         0|            0|            0|  0.00%|   P_top, P_bottom = 1, 0
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|   def residual(P):
    81|         0|            0|            0|  0.00%|       d2x = zeros_like(P)
    82|         0|            0|            0|  0.00%|       d2y = zeros_like(P)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
    85|         0|            0|            0|  0.00%|       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
    86|         0|            0|            0|  0.00%|       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
    89|         0|            0|            0|  0.00%|       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
    90|         0|            0|            0|  0.00%|       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|       return d2x + d2y - 10*cosh(P).mean()**2
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|   # solve
    95|         0|            0|            0|  0.00%|   guess = zeros((nx, ny), float)
    96|         0|            0|            0|  0.00%|   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
    97|         0|            0|            0|  0.00%|   print('Residual: %g' % abs(residual(sol)).max())
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|   # visualize
   100|         0|            0|            0|  0.00%|   import matplotlib.pyplot as plt
   101|         0|            0|            0|  0.00%|   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
   102|         0|            0|            0|  0.00%|   plt.pcolormesh(x, y, sol, shading='gouraud')
   103|         0|            0|            0|  0.00%|   plt.colorbar()
   104|         0|            0|            0|  0.00%|   plt.show()
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|"""
   107|         0|            0|            0|  0.00%|# Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
   108|         0|            0|            0|  0.00%|# Distributed under the same license as SciPy.
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|import sys
   111|         0|            0|            0|  0.00%|import numpy as np
   112|         0|            0|            0|  0.00%|from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
   113|         0|            0|            0|  0.00%|from numpy import asarray, dot, vdot
   114|         0|            0|            0|  0.00%|import scipy.sparse.linalg
   115|         0|            0|            0|  0.00%|import scipy.sparse
   116|         0|            0|            0|  0.00%|from scipy.linalg import get_blas_funcs
   117|         0|            0|            0|  0.00%|import inspect
   118|         0|            0|            0|  0.00%|from scipy._lib._util import getfullargspec_no_self as _getfullargspec
   119|         0|            0|            0|  0.00%|from .linesearch import scalar_search_wolfe1, scalar_search_armijo
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|__all__ = [
   123|         0|            0|            0|  0.00%|    'broyden1', 'broyden2', 'anderson', 'linearmixing',
   124|         0|            0|            0|  0.00%|    'diagbroyden', 'excitingmixing', 'newton_krylov']
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   127|         0|            0|            0|  0.00%|# Utility functions
   128|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|class NoConvergence(Exception):
   132|         0|            0|            0|  0.00%|    pass
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|def maxnorm(x):
   136|         0|            0|            0|  0.00%|    return np.absolute(x).max()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|def _as_inexact(x):
   140|         0|            0|            0|  0.00%|    """Return `x` as an array, of either floats or complex floats"""
   141|         0|            0|            0|  0.00%|    x = asarray(x)
   142|         0|            0|            0|  0.00%|    if not np.issubdtype(x.dtype, np.inexact):
   143|         0|            0|            0|  0.00%|        return asarray(x, dtype=np.float_)
   144|         0|            0|            0|  0.00%|    return x
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|def _array_like(x, x0):
   148|         0|            0|            0|  0.00%|    """Return ndarray `x` as same array subclass and shape as `x0`"""
   149|         0|            0|            0|  0.00%|    x = np.reshape(x, np.shape(x0))
   150|         0|            0|            0|  0.00%|    wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
   151|         0|            0|            0|  0.00%|    return wrap(x)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|def _safe_norm(v):
   155|         0|            0|            0|  0.00%|    if not np.isfinite(v).all():
   156|         0|            0|            0|  0.00%|        return np.array(np.inf)
   157|         0|            0|            0|  0.00%|    return norm(v)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   160|         0|            0|            0|  0.00%|# Generic nonlinear solver machinery
   161|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|_doc_parts = dict(
   165|         0|            0|            0|  0.00%|    params_basic="""
   166|         0|            0|            0|  0.00%|    F : function(x) -> f
   167|         0|            0|            0|  0.00%|        Function whose root to find; should take and return an array-like
   168|         0|            0|            0|  0.00%|        object.
   169|         0|            0|            0|  0.00%|    xin : array_like
   170|         0|            0|            0|  0.00%|        Initial guess for the solution
   171|         0|            0|            0|  0.00%|    """.strip(),
   172|         0|            0|            0|  0.00%|    params_extra="""
   173|         0|            0|            0|  0.00%|    iter : int, optional
   174|         0|            0|            0|  0.00%|        Number of iterations to make. If omitted (default), make as many
   175|         0|            0|            0|  0.00%|        as required to meet tolerances.
   176|         0|            0|            0|  0.00%|    verbose : bool, optional
   177|         0|            0|            0|  0.00%|        Print status to stdout on every iteration.
   178|         0|            0|            0|  0.00%|    maxiter : int, optional
   179|         0|            0|            0|  0.00%|        Maximum number of iterations to make. If more are needed to
   180|         0|            0|            0|  0.00%|        meet convergence, `NoConvergence` is raised.
   181|         0|            0|            0|  0.00%|    f_tol : float, optional
   182|         0|            0|            0|  0.00%|        Absolute tolerance (in max-norm) for the residual.
   183|         0|            0|            0|  0.00%|        If omitted, default is 6e-6.
   184|         0|            0|            0|  0.00%|    f_rtol : float, optional
   185|         0|            0|            0|  0.00%|        Relative tolerance for the residual. If omitted, not used.
   186|         0|            0|            0|  0.00%|    x_tol : float, optional
   187|         0|            0|            0|  0.00%|        Absolute minimum step size, as determined from the Jacobian
   188|         0|            0|            0|  0.00%|        approximation. If the step size is smaller than this, optimization
   189|         0|            0|            0|  0.00%|        is terminated as successful. If omitted, not used.
   190|         0|            0|            0|  0.00%|    x_rtol : float, optional
   191|         0|            0|            0|  0.00%|        Relative minimum step size. If omitted, not used.
   192|         0|            0|            0|  0.00%|    tol_norm : function(vector) -> scalar, optional
   193|         0|            0|            0|  0.00%|        Norm to use in convergence check. Default is the maximum norm.
   194|         0|            0|            0|  0.00%|    line_search : {None, 'armijo' (default), 'wolfe'}, optional
   195|         0|            0|            0|  0.00%|        Which type of a line search to use to determine the step size in the
   196|         0|            0|            0|  0.00%|        direction given by the Jacobian approximation. Defaults to 'armijo'.
   197|         0|            0|            0|  0.00%|    callback : function, optional
   198|         0|            0|            0|  0.00%|        Optional callback function. It is called on every iteration as
   199|         0|            0|            0|  0.00%|        ``callback(x, f)`` where `x` is the current solution and `f`
   200|         0|            0|            0|  0.00%|        the corresponding residual.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    Returns
   203|         0|            0|            0|  0.00%|    -------
   204|         0|            0|            0|  0.00%|    sol : ndarray
   205|         0|            0|            0|  0.00%|        An array (of similar array type as `x0`) containing the final solution.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    Raises
   208|         0|            0|            0|  0.00%|    ------
   209|         0|            0|            0|  0.00%|    NoConvergence
   210|         0|            0|            0|  0.00%|        When a solution was not found.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    """.strip()
   213|         0|            0|            0|  0.00%|)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|def _set_doc(obj):
   217|         0|            0|            0|  0.00%|    if obj.__doc__:
   218|         0|            0|            0|  0.00%|        obj.__doc__ = obj.__doc__ % _doc_parts
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
   222|         0|            0|            0|  0.00%|                 maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   223|         0|            0|            0|  0.00%|                 tol_norm=None, line_search='armijo', callback=None,
   224|         0|            0|            0|  0.00%|                 full_output=False, raise_exception=True):
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    Find a root of a function, in a way suitable for large-scale problems.
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    Parameters
   229|         0|            0|            0|  0.00%|    ----------
   230|         0|            0|            0|  0.00%|    %(params_basic)s
   231|         0|            0|            0|  0.00%|    jacobian : Jacobian
   232|         0|            0|            0|  0.00%|        A Jacobian approximation: `Jacobian` object or something that
   233|         0|            0|            0|  0.00%|        `asjacobian` can transform to one. Alternatively, a string specifying
   234|         0|            0|            0|  0.00%|        which of the builtin Jacobian approximations to use:
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|            krylov, broyden1, broyden2, anderson
   237|         0|            0|            0|  0.00%|            diagbroyden, linearmixing, excitingmixing
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    %(params_extra)s
   240|         0|            0|            0|  0.00%|    full_output : bool
   241|         0|            0|            0|  0.00%|        If true, returns a dictionary `info` containing convergence
   242|         0|            0|            0|  0.00%|        information.
   243|         0|            0|            0|  0.00%|    raise_exception : bool
   244|         0|            0|            0|  0.00%|        If True, a `NoConvergence` exception is raise if no solution is found.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    See Also
   247|         0|            0|            0|  0.00%|    --------
   248|         0|            0|            0|  0.00%|    asjacobian, Jacobian
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    Notes
   251|         0|            0|            0|  0.00%|    -----
   252|         0|            0|            0|  0.00%|    This algorithm implements the inexact Newton method, with
   253|         0|            0|            0|  0.00%|    backtracking or full line searches. Several Jacobian
   254|         0|            0|            0|  0.00%|    approximations are available, including Krylov and Quasi-Newton
   255|         0|            0|            0|  0.00%|    methods.
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    References
   258|         0|            0|            0|  0.00%|    ----------
   259|         0|            0|            0|  0.00%|    .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
   260|         0|            0|            0|  0.00%|       Equations\". Society for Industrial and Applied Mathematics. (1995)
   261|         0|            0|            0|  0.00%|       https://archive.siam.org/books/kelley/fr16/
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    """
   264|         0|            0|            0|  0.00%|    # Can't use default parameters because it's being explicitly passed as None
   265|         0|            0|            0|  0.00%|    # from the calling function, so we need to set it here.
   266|         0|            0|            0|  0.00%|    tol_norm = maxnorm if tol_norm is None else tol_norm
   267|         0|            0|            0|  0.00%|    condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
   268|         0|            0|            0|  0.00%|                                     x_tol=x_tol, x_rtol=x_rtol,
   269|         0|            0|            0|  0.00%|                                     iter=iter, norm=tol_norm)
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    x0 = _as_inexact(x0)
   272|         0|            0|            0|  0.00%|    func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
   273|         0|            0|            0|  0.00%|    x = x0.flatten()
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    dx = np.inf
   276|         0|            0|            0|  0.00%|    Fx = func(x)
   277|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|    jacobian = asjacobian(jacobian)
   280|         0|            0|            0|  0.00%|    jacobian.setup(x.copy(), Fx, func)
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|    if maxiter is None:
   283|         0|            0|            0|  0.00%|        if iter is not None:
   284|         0|            0|            0|  0.00%|            maxiter = iter + 1
   285|         0|            0|            0|  0.00%|        else:
   286|         0|            0|            0|  0.00%|            maxiter = 100*(x.size+1)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    if line_search is True:
   289|         0|            0|            0|  0.00%|        line_search = 'armijo'
   290|         0|            0|            0|  0.00%|    elif line_search is False:
   291|         0|            0|            0|  0.00%|        line_search = None
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if line_search not in (None, 'armijo', 'wolfe'):
   294|         0|            0|            0|  0.00%|        raise ValueError("Invalid line search")
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|    # Solver tolerance selection
   297|         0|            0|            0|  0.00%|    gamma = 0.9
   298|         0|            0|            0|  0.00%|    eta_max = 0.9999
   299|         0|            0|            0|  0.00%|    eta_treshold = 0.1
   300|         0|            0|            0|  0.00%|    eta = 1e-3
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    for n in range(maxiter):
   303|         0|            0|            0|  0.00%|        status = condition.check(Fx, x, dx)
   304|         0|            0|            0|  0.00%|        if status:
   305|         0|            0|            0|  0.00%|            break
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|        # The tolerance, as computed for scipy.sparse.linalg.* routines
   308|         0|            0|            0|  0.00%|        tol = min(eta, eta*Fx_norm)
   309|         0|            0|            0|  0.00%|        dx = -jacobian.solve(Fx, tol=tol)
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|        if norm(dx) == 0:
   312|         0|            0|            0|  0.00%|            raise ValueError("Jacobian inversion yielded zero vector. "
   313|         0|            0|            0|  0.00%|                             "This indicates a bug in the Jacobian "
   314|         0|            0|            0|  0.00%|                             "approximation.")
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|        # Line search, or Newton step
   317|         0|            0|            0|  0.00%|        if line_search:
   318|         0|            0|            0|  0.00%|            s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
   319|         0|            0|            0|  0.00%|                                                        line_search)
   320|         0|            0|            0|  0.00%|        else:
   321|         0|            0|            0|  0.00%|            s = 1.0
   322|         0|            0|            0|  0.00%|            x = x + dx
   323|         0|            0|            0|  0.00%|            Fx = func(x)
   324|         0|            0|            0|  0.00%|            Fx_norm_new = norm(Fx)
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        jacobian.update(x.copy(), Fx)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|        if callback:
   329|         0|            0|            0|  0.00%|            callback(x, Fx)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        # Adjust forcing parameters for inexact methods
   332|         0|            0|            0|  0.00%|        eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
   333|         0|            0|            0|  0.00%|        if gamma * eta**2 < eta_treshold:
   334|         0|            0|            0|  0.00%|            eta = min(eta_max, eta_A)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            eta = min(eta_max, max(eta_A, gamma*eta**2))
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        Fx_norm = Fx_norm_new
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|        # Print status
   341|         0|            0|            0|  0.00%|        if verbose:
   342|         0|            0|            0|  0.00%|            sys.stdout.write("%d:  |F(x)| = %g; step %g\n" % (
   343|         0|            0|            0|  0.00%|                n, tol_norm(Fx), s))
   344|         0|            0|            0|  0.00%|            sys.stdout.flush()
   345|         0|            0|            0|  0.00%|    else:
   346|         0|            0|            0|  0.00%|        if raise_exception:
   347|         0|            0|            0|  0.00%|            raise NoConvergence(_array_like(x, x0))
   348|         0|            0|            0|  0.00%|        else:
   349|         0|            0|            0|  0.00%|            status = 2
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    if full_output:
   352|         0|            0|            0|  0.00%|        info = {'nit': condition.iteration,
   353|         0|            0|            0|  0.00%|                'fun': Fx,
   354|         0|            0|            0|  0.00%|                'status': status,
   355|         0|            0|            0|  0.00%|                'success': status == 1,
   356|         0|            0|            0|  0.00%|                'message': {1: 'A solution was found at the specified '
   357|         0|            0|            0|  0.00%|                               'tolerance.',
   358|         0|            0|            0|  0.00%|                            2: 'The maximum number of iterations allowed '
   359|         0|            0|            0|  0.00%|                               'has been reached.'
   360|         0|            0|            0|  0.00%|                            }[status]
   361|         0|            0|            0|  0.00%|                }
   362|         0|            0|            0|  0.00%|        return _array_like(x, x0), info
   363|         0|            0|            0|  0.00%|    else:
   364|         0|            0|            0|  0.00%|        return _array_like(x, x0)
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|_set_doc(nonlin_solve)
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
   371|         0|            0|            0|  0.00%|                        smin=1e-2):
   372|         0|            0|            0|  0.00%|    tmp_s = [0]
   373|         0|            0|            0|  0.00%|    tmp_Fx = [Fx]
   374|         0|            0|            0|  0.00%|    tmp_phi = [norm(Fx)**2]
   375|         0|            0|            0|  0.00%|    s_norm = norm(x) / norm(dx)
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def phi(s, store=True):
   378|         0|            0|            0|  0.00%|        if s == tmp_s[0]:
   379|         0|            0|            0|  0.00%|            return tmp_phi[0]
   380|         0|            0|            0|  0.00%|        xt = x + s*dx
   381|         0|            0|            0|  0.00%|        v = func(xt)
   382|         0|            0|            0|  0.00%|        p = _safe_norm(v)**2
   383|         0|            0|            0|  0.00%|        if store:
   384|         0|            0|            0|  0.00%|            tmp_s[0] = s
   385|         0|            0|            0|  0.00%|            tmp_phi[0] = p
   386|         0|            0|            0|  0.00%|            tmp_Fx[0] = v
   387|         0|            0|            0|  0.00%|        return p
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    def derphi(s):
   390|         0|            0|            0|  0.00%|        ds = (abs(s) + s_norm + 1) * rdiff
   391|         0|            0|            0|  0.00%|        return (phi(s+ds, store=False) - phi(s)) / ds
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    if search_type == 'wolfe':
   394|         0|            0|            0|  0.00%|        s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
   395|         0|            0|            0|  0.00%|                                             xtol=1e-2, amin=smin)
   396|         0|            0|            0|  0.00%|    elif search_type == 'armijo':
   397|         0|            0|            0|  0.00%|        s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
   398|         0|            0|            0|  0.00%|                                       amin=smin)
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|    if s is None:
   401|         0|            0|            0|  0.00%|        # XXX: No suitable step length found. Take the full Newton step,
   402|         0|            0|            0|  0.00%|        #      and hope for the best.
   403|         0|            0|            0|  0.00%|        s = 1.0
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    x = x + s*dx
   406|         0|            0|            0|  0.00%|    if s == tmp_s[0]:
   407|         0|            0|            0|  0.00%|        Fx = tmp_Fx[0]
   408|         0|            0|            0|  0.00%|    else:
   409|         0|            0|            0|  0.00%|        Fx = func(x)
   410|         0|            0|            0|  0.00%|    Fx_norm = norm(Fx)
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|    return s, x, Fx, Fx_norm
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|class TerminationCondition(object):
   416|         0|            0|            0|  0.00%|    """
   417|         0|            0|            0|  0.00%|    Termination condition for an iteration. It is terminated if
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|    - |F| < f_rtol*|F_0|, AND
   420|         0|            0|            0|  0.00%|    - |F| < f_tol
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    AND
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    - |dx| < x_rtol*|x|, AND
   425|         0|            0|            0|  0.00%|    - |dx| < x_tol
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    """
   428|         0|            0|            0|  0.00%|    def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
   429|         0|            0|            0|  0.00%|                 iter=None, norm=maxnorm):
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|        if f_tol is None:
   432|         0|            0|            0|  0.00%|            f_tol = np.finfo(np.float_).eps ** (1./3)
   433|         0|            0|            0|  0.00%|        if f_rtol is None:
   434|         0|            0|            0|  0.00%|            f_rtol = np.inf
   435|         0|            0|            0|  0.00%|        if x_tol is None:
   436|         0|            0|            0|  0.00%|            x_tol = np.inf
   437|         0|            0|            0|  0.00%|        if x_rtol is None:
   438|         0|            0|            0|  0.00%|            x_rtol = np.inf
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|        self.x_tol = x_tol
   441|         0|            0|            0|  0.00%|        self.x_rtol = x_rtol
   442|         0|            0|            0|  0.00%|        self.f_tol = f_tol
   443|         0|            0|            0|  0.00%|        self.f_rtol = f_rtol
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|        self.norm = norm
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        self.iter = iter
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|        self.f0_norm = None
   450|         0|            0|            0|  0.00%|        self.iteration = 0
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def check(self, f, x, dx):
   453|         0|            0|            0|  0.00%|        self.iteration += 1
   454|         0|            0|            0|  0.00%|        f_norm = self.norm(f)
   455|         0|            0|            0|  0.00%|        x_norm = self.norm(x)
   456|         0|            0|            0|  0.00%|        dx_norm = self.norm(dx)
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|        if self.f0_norm is None:
   459|         0|            0|            0|  0.00%|            self.f0_norm = f_norm
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|        if f_norm == 0:
   462|         0|            0|            0|  0.00%|            return 1
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|        if self.iter is not None:
   465|         0|            0|            0|  0.00%|            # backwards compatibility with SciPy 0.6.0
   466|         0|            0|            0|  0.00%|            return 2 * (self.iteration > self.iter)
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        # NB: condition must succeed for rtol=inf even if norm == 0
   469|         0|            0|            0|  0.00%|        return int((f_norm <= self.f_tol
   470|         0|            0|            0|  0.00%|                    and f_norm/self.f_rtol <= self.f0_norm)
   471|         0|            0|            0|  0.00%|                   and (dx_norm <= self.x_tol
   472|         0|            0|            0|  0.00%|                        and dx_norm/self.x_rtol <= x_norm))
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   476|         0|            0|            0|  0.00%|# Generic Jacobian approximation
   477|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|class Jacobian(object):
   480|         0|            0|            0|  0.00%|    """
   481|         0|            0|            0|  0.00%|    Common interface for Jacobians or Jacobian approximations.
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    The optional methods come useful when implementing trust region
   484|         0|            0|            0|  0.00%|    etc., algorithms that often require evaluating transposes of the
   485|         0|            0|            0|  0.00%|    Jacobian.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|    Methods
   488|         0|            0|            0|  0.00%|    -------
   489|         0|            0|            0|  0.00%|    solve
   490|         0|            0|            0|  0.00%|        Returns J^-1 * v
   491|         0|            0|            0|  0.00%|    update
   492|         0|            0|            0|  0.00%|        Updates Jacobian to point `x` (where the function has residual `Fx`)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    matvec : optional
   495|         0|            0|            0|  0.00%|        Returns J * v
   496|         0|            0|            0|  0.00%|    rmatvec : optional
   497|         0|            0|            0|  0.00%|        Returns A^H * v
   498|         0|            0|            0|  0.00%|    rsolve : optional
   499|         0|            0|            0|  0.00%|        Returns A^-H * v
   500|         0|            0|            0|  0.00%|    matmat : optional
   501|         0|            0|            0|  0.00%|        Returns A * V, where V is a dense matrix with dimensions (N,K).
   502|         0|            0|            0|  0.00%|    todense : optional
   503|         0|            0|            0|  0.00%|        Form the dense Jacobian matrix. Necessary for dense trust region
   504|         0|            0|            0|  0.00%|        algorithms, and useful for testing.
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    Attributes
   507|         0|            0|            0|  0.00%|    ----------
   508|         0|            0|            0|  0.00%|    shape
   509|         0|            0|            0|  0.00%|        Matrix dimensions (M, N)
   510|         0|            0|            0|  0.00%|    dtype
   511|         0|            0|            0|  0.00%|        Data type of the matrix.
   512|         0|            0|            0|  0.00%|    func : callable, optional
   513|         0|            0|            0|  0.00%|        Function the Jacobian corresponds to
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __init__(self, **kw):
   518|         0|            0|            0|  0.00%|        names = ["solve", "update", "matvec", "rmatvec", "rsolve",
   519|         0|            0|            0|  0.00%|                 "matmat", "todense", "shape", "dtype"]
   520|         0|            0|            0|  0.00%|        for name, value in kw.items():
   521|         0|            0|            0|  0.00%|            if name not in names:
   522|         0|            0|            0|  0.00%|                raise ValueError("Unknown keyword argument %s" % name)
   523|         0|            0|            0|  0.00%|            if value is not None:
   524|         0|            0|            0|  0.00%|                setattr(self, name, kw[name])
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        if hasattr(self, 'todense'):
   527|         0|            0|            0|  0.00%|            self.__array__ = lambda: self.todense()
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def aspreconditioner(self):
   530|         0|            0|            0|  0.00%|        return InverseJacobian(self)
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   533|         0|            0|            0|  0.00%|        raise NotImplementedError
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|    def update(self, x, F):
   536|         0|            0|            0|  0.00%|        pass
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   539|         0|            0|            0|  0.00%|        self.func = func
   540|         0|            0|            0|  0.00%|        self.shape = (F.size, x.size)
   541|         0|            0|            0|  0.00%|        self.dtype = F.dtype
   542|         0|            0|            0|  0.00%|        if self.__class__.setup is Jacobian.setup:
   543|         0|            0|            0|  0.00%|            # Call on the first point unless overridden
   544|         0|            0|            0|  0.00%|            self.update(x, F)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|class InverseJacobian(object):
   548|         0|            0|            0|  0.00%|    def __init__(self, jacobian):
   549|         0|            0|            0|  0.00%|        self.jacobian = jacobian
   550|         0|            0|            0|  0.00%|        self.matvec = jacobian.solve
   551|         0|            0|            0|  0.00%|        self.update = jacobian.update
   552|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'setup'):
   553|         0|            0|            0|  0.00%|            self.setup = jacobian.setup
   554|         0|            0|            0|  0.00%|        if hasattr(jacobian, 'rsolve'):
   555|         0|            0|            0|  0.00%|            self.rmatvec = jacobian.rsolve
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    @property
   558|         0|            0|            0|  0.00%|    def shape(self):
   559|         0|            0|            0|  0.00%|        return self.jacobian.shape
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def dtype(self):
   563|         0|            0|            0|  0.00%|        return self.jacobian.dtype
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|def asjacobian(J):
   567|         0|            0|            0|  0.00%|    """
   568|         0|            0|            0|  0.00%|    Convert given object to one suitable for use as a Jacobian.
   569|         0|            0|            0|  0.00%|    """
   570|         0|            0|            0|  0.00%|    spsolve = scipy.sparse.linalg.spsolve
   571|         0|            0|            0|  0.00%|    if isinstance(J, Jacobian):
   572|         0|            0|            0|  0.00%|        return J
   573|         0|            0|            0|  0.00%|    elif inspect.isclass(J) and issubclass(J, Jacobian):
   574|         0|            0|            0|  0.00%|        return J()
   575|         0|            0|            0|  0.00%|    elif isinstance(J, np.ndarray):
   576|         0|            0|            0|  0.00%|        if J.ndim > 2:
   577|         0|            0|            0|  0.00%|            raise ValueError('array must have rank <= 2')
   578|         0|            0|            0|  0.00%|        J = np.atleast_2d(np.asarray(J))
   579|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   580|         0|            0|            0|  0.00%|            raise ValueError('array must be square')
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: dot(J, v),
   583|         0|            0|            0|  0.00%|                        rmatvec=lambda v: dot(J.conj().T, v),
   584|         0|            0|            0|  0.00%|                        solve=lambda v: solve(J, v),
   585|         0|            0|            0|  0.00%|                        rsolve=lambda v: solve(J.conj().T, v),
   586|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   587|         0|            0|            0|  0.00%|    elif scipy.sparse.isspmatrix(J):
   588|         0|            0|            0|  0.00%|        if J.shape[0] != J.shape[1]:
   589|         0|            0|            0|  0.00%|            raise ValueError('matrix must be square')
   590|         0|            0|            0|  0.00%|        return Jacobian(matvec=lambda v: J*v,
   591|         0|            0|            0|  0.00%|                        rmatvec=lambda v: J.conj().T * v,
   592|         0|            0|            0|  0.00%|                        solve=lambda v: spsolve(J, v),
   593|         0|            0|            0|  0.00%|                        rsolve=lambda v: spsolve(J.conj().T, v),
   594|         0|            0|            0|  0.00%|                        dtype=J.dtype, shape=J.shape)
   595|         0|            0|            0|  0.00%|    elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
   596|         0|            0|            0|  0.00%|        return Jacobian(matvec=getattr(J, 'matvec'),
   597|         0|            0|            0|  0.00%|                        rmatvec=getattr(J, 'rmatvec'),
   598|         0|            0|            0|  0.00%|                        solve=J.solve,
   599|         0|            0|            0|  0.00%|                        rsolve=getattr(J, 'rsolve'),
   600|         0|            0|            0|  0.00%|                        update=getattr(J, 'update'),
   601|         0|            0|            0|  0.00%|                        setup=getattr(J, 'setup'),
   602|         0|            0|            0|  0.00%|                        dtype=J.dtype,
   603|         0|            0|            0|  0.00%|                        shape=J.shape)
   604|         0|            0|            0|  0.00%|    elif callable(J):
   605|         0|            0|            0|  0.00%|        # Assume it's a function J(x) that returns the Jacobian
   606|         0|            0|            0|  0.00%|        class Jac(Jacobian):
   607|         0|            0|            0|  0.00%|            def update(self, x, F):
   608|         0|            0|            0|  0.00%|                self.x = x
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|            def solve(self, v, tol=0):
   611|         0|            0|            0|  0.00%|                m = J(self.x)
   612|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   613|         0|            0|            0|  0.00%|                    return solve(m, v)
   614|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   615|         0|            0|            0|  0.00%|                    return spsolve(m, v)
   616|         0|            0|            0|  0.00%|                else:
   617|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|            def matvec(self, v):
   620|         0|            0|            0|  0.00%|                m = J(self.x)
   621|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   622|         0|            0|            0|  0.00%|                    return dot(m, v)
   623|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   624|         0|            0|            0|  0.00%|                    return m*v
   625|         0|            0|            0|  0.00%|                else:
   626|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|            def rsolve(self, v, tol=0):
   629|         0|            0|            0|  0.00%|                m = J(self.x)
   630|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   631|         0|            0|            0|  0.00%|                    return solve(m.conj().T, v)
   632|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   633|         0|            0|            0|  0.00%|                    return spsolve(m.conj().T, v)
   634|         0|            0|            0|  0.00%|                else:
   635|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            def rmatvec(self, v):
   638|         0|            0|            0|  0.00%|                m = J(self.x)
   639|         0|            0|            0|  0.00%|                if isinstance(m, np.ndarray):
   640|         0|            0|            0|  0.00%|                    return dot(m.conj().T, v)
   641|         0|            0|            0|  0.00%|                elif scipy.sparse.isspmatrix(m):
   642|         0|            0|            0|  0.00%|                    return m.conj().T * v
   643|         0|            0|            0|  0.00%|                else:
   644|         0|            0|            0|  0.00%|                    raise ValueError("Unknown matrix type")
   645|         0|            0|            0|  0.00%|        return Jac()
   646|         0|            0|            0|  0.00%|    elif isinstance(J, str):
   647|         0|            0|            0|  0.00%|        return dict(broyden1=BroydenFirst,
   648|         0|            0|            0|  0.00%|                    broyden2=BroydenSecond,
   649|         0|            0|            0|  0.00%|                    anderson=Anderson,
   650|         0|            0|            0|  0.00%|                    diagbroyden=DiagBroyden,
   651|         0|            0|            0|  0.00%|                    linearmixing=LinearMixing,
   652|         0|            0|            0|  0.00%|                    excitingmixing=ExcitingMixing,
   653|         0|            0|            0|  0.00%|                    krylov=KrylovJacobian)[J]()
   654|         0|            0|            0|  0.00%|    else:
   655|         0|            0|            0|  0.00%|        raise TypeError('Cannot convert object to a Jacobian')
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   659|         0|            0|            0|  0.00%|# Broyden
   660|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class GenericBroyden(Jacobian):
   663|         0|            0|            0|  0.00%|    def setup(self, x0, f0, func):
   664|         0|            0|            0|  0.00%|        Jacobian.setup(self, x0, f0, func)
   665|         0|            0|            0|  0.00%|        self.last_f = f0
   666|         0|            0|            0|  0.00%|        self.last_x = x0
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        if hasattr(self, 'alpha') and self.alpha is None:
   669|         0|            0|            0|  0.00%|            # Autoscale the initial Jacobian parameter
   670|         0|            0|            0|  0.00%|            # unless we have already guessed the solution.
   671|         0|            0|            0|  0.00%|            normf0 = norm(f0)
   672|         0|            0|            0|  0.00%|            if normf0:
   673|         0|            0|            0|  0.00%|                self.alpha = 0.5*max(norm(x0), 1) / normf0
   674|         0|            0|            0|  0.00%|            else:
   675|         0|            0|            0|  0.00%|                self.alpha = 1.0
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   678|         0|            0|            0|  0.00%|        raise NotImplementedError
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|    def update(self, x, f):
   681|         0|            0|            0|  0.00%|        df = f - self.last_f
   682|         0|            0|            0|  0.00%|        dx = x - self.last_x
   683|         0|            0|            0|  0.00%|        self._update(x, f, dx, df, norm(dx), norm(df))
   684|         0|            0|            0|  0.00%|        self.last_f = f
   685|         0|            0|            0|  0.00%|        self.last_x = x
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|class LowRankMatrix(object):
   689|         0|            0|            0|  0.00%|    r"""
   690|         0|            0|            0|  0.00%|    A matrix represented as
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    However, if the rank of the matrix reaches the dimension of the vectors,
   695|         0|            0|            0|  0.00%|    full matrix representation will be used thereon.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|    """
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def __init__(self, alpha, n, dtype):
   700|         0|            0|            0|  0.00%|        self.alpha = alpha
   701|         0|            0|            0|  0.00%|        self.cs = []
   702|         0|            0|            0|  0.00%|        self.ds = []
   703|         0|            0|            0|  0.00%|        self.n = n
   704|         0|            0|            0|  0.00%|        self.dtype = dtype
   705|         0|            0|            0|  0.00%|        self.collapsed = None
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    @staticmethod
   708|         0|            0|            0|  0.00%|    def _matvec(v, alpha, cs, ds):
   709|         0|            0|            0|  0.00%|        axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
   710|         0|            0|            0|  0.00%|                                          cs[:1] + [v])
   711|         0|            0|            0|  0.00%|        w = alpha * v
   712|         0|            0|            0|  0.00%|        for c, d in zip(cs, ds):
   713|         0|            0|            0|  0.00%|            a = dotc(d, v)
   714|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, a)
   715|         0|            0|            0|  0.00%|        return w
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    @staticmethod
   718|         0|            0|            0|  0.00%|    def _solve(v, alpha, cs, ds):
   719|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   720|         0|            0|            0|  0.00%|        if len(cs) == 0:
   721|         0|            0|            0|  0.00%|            return v/alpha
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|        # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|        c0 = cs[0]
   728|         0|            0|            0|  0.00%|        A = alpha * np.identity(len(cs), dtype=c0.dtype)
   729|         0|            0|            0|  0.00%|        for i, d in enumerate(ds):
   730|         0|            0|            0|  0.00%|            for j, c in enumerate(cs):
   731|         0|            0|            0|  0.00%|                A[i,j] += dotc(d, c)
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|        q = np.zeros(len(cs), dtype=c0.dtype)
   734|         0|            0|            0|  0.00%|        for j, d in enumerate(ds):
   735|         0|            0|            0|  0.00%|            q[j] = dotc(d, v)
   736|         0|            0|            0|  0.00%|        q /= alpha
   737|         0|            0|            0|  0.00%|        q = solve(A, q)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|        w = v/alpha
   740|         0|            0|            0|  0.00%|        for c, qc in zip(cs, q):
   741|         0|            0|            0|  0.00%|            w = axpy(c, w, w.size, -qc)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|        return w
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def matvec(self, v):
   746|         0|            0|            0|  0.00%|        """Evaluate w = M v"""
   747|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   748|         0|            0|            0|  0.00%|            return np.dot(self.collapsed, v)
   749|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def rmatvec(self, v):
   752|         0|            0|            0|  0.00%|        """Evaluate w = M^H v"""
   753|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   754|         0|            0|            0|  0.00%|            return np.dot(self.collapsed.T.conj(), v)
   755|         0|            0|            0|  0.00%|        return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    def solve(self, v, tol=0):
   758|         0|            0|            0|  0.00%|        """Evaluate w = M^-1 v"""
   759|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   760|         0|            0|            0|  0.00%|            return solve(self.collapsed, v)
   761|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|    def rsolve(self, v, tol=0):
   764|         0|            0|            0|  0.00%|        """Evaluate w = M^-H v"""
   765|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   766|         0|            0|            0|  0.00%|            return solve(self.collapsed.T.conj(), v)
   767|         0|            0|            0|  0.00%|        return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|    def append(self, c, d):
   770|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   771|         0|            0|            0|  0.00%|            self.collapsed += c[:,None] * d[None,:].conj()
   772|         0|            0|            0|  0.00%|            return
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|        self.cs.append(c)
   775|         0|            0|            0|  0.00%|        self.ds.append(d)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        if len(self.cs) > c.size:
   778|         0|            0|            0|  0.00%|            self.collapse()
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    def __array__(self):
   781|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   782|         0|            0|            0|  0.00%|            return self.collapsed
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|        Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
   785|         0|            0|            0|  0.00%|        for c, d in zip(self.cs, self.ds):
   786|         0|            0|            0|  0.00%|            Gm += c[:,None]*d[None,:].conj()
   787|         0|            0|            0|  0.00%|        return Gm
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    def collapse(self):
   790|         0|            0|            0|  0.00%|        """Collapse the low-rank matrix to a full-rank one."""
   791|         0|            0|            0|  0.00%|        self.collapsed = np.array(self)
   792|         0|            0|            0|  0.00%|        self.cs = None
   793|         0|            0|            0|  0.00%|        self.ds = None
   794|         0|            0|            0|  0.00%|        self.alpha = None
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    def restart_reduce(self, rank):
   797|         0|            0|            0|  0.00%|        """
   798|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping all vectors.
   799|         0|            0|            0|  0.00%|        """
   800|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   801|         0|            0|            0|  0.00%|            return
   802|         0|            0|            0|  0.00%|        assert rank > 0
   803|         0|            0|            0|  0.00%|        if len(self.cs) > rank:
   804|         0|            0|            0|  0.00%|            del self.cs[:]
   805|         0|            0|            0|  0.00%|            del self.ds[:]
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|    def simple_reduce(self, rank):
   808|         0|            0|            0|  0.00%|        """
   809|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by dropping oldest vectors.
   810|         0|            0|            0|  0.00%|        """
   811|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   812|         0|            0|            0|  0.00%|            return
   813|         0|            0|            0|  0.00%|        assert rank > 0
   814|         0|            0|            0|  0.00%|        while len(self.cs) > rank:
   815|         0|            0|            0|  0.00%|            del self.cs[0]
   816|         0|            0|            0|  0.00%|            del self.ds[0]
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def svd_reduce(self, max_rank, to_retain=None):
   819|         0|            0|            0|  0.00%|        """
   820|         0|            0|            0|  0.00%|        Reduce the rank of the matrix by retaining some SVD components.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        This corresponds to the \"Broyden Rank Reduction Inverse\"
   823|         0|            0|            0|  0.00%|        algorithm described in [1]_.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        Note that the SVD decomposition can be done by solving only a
   826|         0|            0|            0|  0.00%|        problem whose size is the effective rank of this matrix, which
   827|         0|            0|            0|  0.00%|        is viable even for large problems.
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|        Parameters
   830|         0|            0|            0|  0.00%|        ----------
   831|         0|            0|            0|  0.00%|        max_rank : int
   832|         0|            0|            0|  0.00%|            Maximum rank of this matrix after reduction.
   833|         0|            0|            0|  0.00%|        to_retain : int, optional
   834|         0|            0|            0|  0.00%|            Number of SVD components to retain when reduction is done
   835|         0|            0|            0|  0.00%|            (ie. rank > max_rank). Default is ``max_rank - 2``.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        References
   838|         0|            0|            0|  0.00%|        ----------
   839|         0|            0|            0|  0.00%|        .. [1] B.A. van der Rotten, PhD thesis,
   840|         0|            0|            0|  0.00%|           \"A limited memory Broyden method to solve high-dimensional
   841|         0|            0|            0|  0.00%|           systems of nonlinear equations\". Mathematisch Instituut,
   842|         0|            0|            0|  0.00%|           Universiteit Leiden, The Netherlands (2003).
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|           https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        if self.collapsed is not None:
   848|         0|            0|            0|  0.00%|            return
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        p = max_rank
   851|         0|            0|            0|  0.00%|        if to_retain is not None:
   852|         0|            0|            0|  0.00%|            q = to_retain
   853|         0|            0|            0|  0.00%|        else:
   854|         0|            0|            0|  0.00%|            q = p - 2
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|        if self.cs:
   857|         0|            0|            0|  0.00%|            p = min(p, len(self.cs[0]))
   858|         0|            0|            0|  0.00%|        q = max(0, min(q, p-1))
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|        m = len(self.cs)
   861|         0|            0|            0|  0.00%|        if m < p:
   862|         0|            0|            0|  0.00%|            # nothing to do
   863|         0|            0|            0|  0.00%|            return
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|        C = np.array(self.cs).T
   866|         0|            0|            0|  0.00%|        D = np.array(self.ds).T
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|        D, R = qr(D, mode='economic')
   869|         0|            0|            0|  0.00%|        C = dot(C, R.T.conj())
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        U, S, WH = svd(C, full_matrices=False, compute_uv=True)
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|        C = dot(C, inv(WH))
   874|         0|            0|            0|  0.00%|        D = dot(D, WH.T.conj())
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        for k in range(q):
   877|         0|            0|            0|  0.00%|            self.cs[k] = C[:,k].copy()
   878|         0|            0|            0|  0.00%|            self.ds[k] = D[:,k].copy()
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|        del self.cs[q:]
   881|         0|            0|            0|  0.00%|        del self.ds[q:]
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|_doc_parts['broyden_params'] = """
   885|         0|            0|            0|  0.00%|    alpha : float, optional
   886|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is ``(-1/alpha)``.
   887|         0|            0|            0|  0.00%|    reduction_method : str or tuple, optional
   888|         0|            0|            0|  0.00%|        Method used in ensuring that the rank of the Broyden matrix
   889|         0|            0|            0|  0.00%|        stays low. Can either be a string giving the name of the method,
   890|         0|            0|            0|  0.00%|        or a tuple of the form ``(method, param1, param2, ...)``
   891|         0|            0|            0|  0.00%|        that gives the name of the method and values for additional parameters.
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|        Methods available:
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|            - ``restart``: drop all matrix columns. Has no extra parameters.
   896|         0|            0|            0|  0.00%|            - ``simple``: drop oldest matrix column. Has no extra parameters.
   897|         0|            0|            0|  0.00%|            - ``svd``: keep only the most significant SVD components.
   898|         0|            0|            0|  0.00%|              Takes an extra parameter, ``to_retain``, which determines the
   899|         0|            0|            0|  0.00%|              number of SVD components to retain when rank reduction is done.
   900|         0|            0|            0|  0.00%|              Default is ``max_rank - 2``.
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|    max_rank : int, optional
   903|         0|            0|            0|  0.00%|        Maximum rank for the Broyden matrix.
   904|         0|            0|            0|  0.00%|        Default is infinity (i.e., no rank reduction).
   905|         0|            0|            0|  0.00%|    """.strip()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|class BroydenFirst(GenericBroyden):
   909|         0|            0|            0|  0.00%|    r"""
   910|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden's first Jacobian approximation.
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's good method\".
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    Parameters
   915|         0|            0|            0|  0.00%|    ----------
   916|         0|            0|            0|  0.00%|    %(params_basic)s
   917|         0|            0|            0|  0.00%|    %(broyden_params)s
   918|         0|            0|            0|  0.00%|    %(params_extra)s
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|    See Also
   921|         0|            0|            0|  0.00%|    --------
   922|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
   923|         0|            0|            0|  0.00%|           functions. See ``method=='broyden1'`` in particular.
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|    Notes
   926|         0|            0|            0|  0.00%|    -----
   927|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|    which corresponds to Broyden's first Jacobian update
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|    .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|    References
   937|         0|            0|            0|  0.00%|    ----------
   938|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
   939|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
   940|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
   941|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|    """
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
   948|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
   949|         0|            0|            0|  0.00%|        self.alpha = alpha
   950|         0|            0|            0|  0.00%|        self.Gm = None
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|        if max_rank is None:
   953|         0|            0|            0|  0.00%|            max_rank = np.inf
   954|         0|            0|            0|  0.00%|        self.max_rank = max_rank
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|        if isinstance(reduction_method, str):
   957|         0|            0|            0|  0.00%|            reduce_params = ()
   958|         0|            0|            0|  0.00%|        else:
   959|         0|            0|            0|  0.00%|            reduce_params = reduction_method[1:]
   960|         0|            0|            0|  0.00%|            reduction_method = reduction_method[0]
   961|         0|            0|            0|  0.00%|        reduce_params = (max_rank - 1,) + reduce_params
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|        if reduction_method == 'svd':
   964|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
   965|         0|            0|            0|  0.00%|        elif reduction_method == 'simple':
   966|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
   967|         0|            0|            0|  0.00%|        elif reduction_method == 'restart':
   968|         0|            0|            0|  0.00%|            self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
   969|         0|            0|            0|  0.00%|        else:
   970|         0|            0|            0|  0.00%|            raise ValueError("Unknown rank reduction method '%s'" %
   971|         0|            0|            0|  0.00%|                             reduction_method)
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
   974|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
   975|         0|            0|            0|  0.00%|        self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def todense(self):
   978|         0|            0|            0|  0.00%|        return inv(self.Gm)
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
   981|         0|            0|            0|  0.00%|        r = self.Gm.matvec(f)
   982|         0|            0|            0|  0.00%|        if not np.isfinite(r).all():
   983|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
   984|         0|            0|            0|  0.00%|            self.setup(self.last_x, self.last_f, self.func)
   985|         0|            0|            0|  0.00%|        return self.Gm.matvec(f)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def matvec(self, f):
   988|         0|            0|            0|  0.00%|        return self.Gm.solve(f)
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
   991|         0|            0|            0|  0.00%|        return self.Gm.rmatvec(f)
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    def rmatvec(self, f):
   994|         0|            0|            0|  0.00%|        return self.Gm.rsolve(f)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
   997|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|        v = self.Gm.rmatvec(dx)
  1000|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1001|         0|            0|            0|  0.00%|        d = v / vdot(df, v)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|class BroydenSecond(BroydenFirst):
  1007|         0|            0|            0|  0.00%|    """
  1008|         0|            0|            0|  0.00%|    Find a root of a function, using Broyden\'s second Jacobian approximation.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|    This method is also known as \"Broyden's bad method\".
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    Parameters
  1013|         0|            0|            0|  0.00%|    ----------
  1014|         0|            0|            0|  0.00%|    %(params_basic)s
  1015|         0|            0|            0|  0.00%|    %(broyden_params)s
  1016|         0|            0|            0|  0.00%|    %(params_extra)s
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|    See Also
  1019|         0|            0|            0|  0.00%|    --------
  1020|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1021|         0|            0|            0|  0.00%|           functions. See ``method=='broyden2'`` in particular.
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|    Notes
  1024|         0|            0|            0|  0.00%|    -----
  1025|         0|            0|            0|  0.00%|    This algorithm implements the inverse Jacobian Quasi-Newton update
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    corresponding to Broyden's second method.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    References
  1032|         0|            0|            0|  0.00%|    ----------
  1033|         0|            0|            0|  0.00%|    .. [1] B.A. van der Rotten, PhD thesis,
  1034|         0|            0|            0|  0.00%|       \"A limited memory Broyden method to solve high-dimensional
  1035|         0|            0|            0|  0.00%|       systems of nonlinear equations\". Mathematisch Instituut,
  1036|         0|            0|            0|  0.00%|       Universiteit Leiden, The Netherlands (2003).
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|    """
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1043|         0|            0|            0|  0.00%|        self._reduce()  # reduce first to preserve secant condition
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|        v = df
  1046|         0|            0|            0|  0.00%|        c = dx - self.Gm.matvec(df)
  1047|         0|            0|            0|  0.00%|        d = v / df_norm**2
  1048|         0|            0|            0|  0.00%|        self.Gm.append(c, d)
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1052|         0|            0|            0|  0.00%|# Broyden-like (restricted memory)
  1053|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|class Anderson(GenericBroyden):
  1056|         0|            0|            0|  0.00%|    """
  1057|         0|            0|            0|  0.00%|    Find a root of a function, using (extended) Anderson mixing.
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|    The Jacobian is formed by for a 'best' solution in the space
  1060|         0|            0|            0|  0.00%|    spanned by last `M` vectors. As a result, only a MxM matrix
  1061|         0|            0|            0|  0.00%|    inversions and MxN multiplications are required. [Ey]_
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|    Parameters
  1064|         0|            0|            0|  0.00%|    ----------
  1065|         0|            0|            0|  0.00%|    %(params_basic)s
  1066|         0|            0|            0|  0.00%|    alpha : float, optional
  1067|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1068|         0|            0|            0|  0.00%|    M : float, optional
  1069|         0|            0|            0|  0.00%|        Number of previous vectors to retain. Defaults to 5.
  1070|         0|            0|            0|  0.00%|    w0 : float, optional
  1071|         0|            0|            0|  0.00%|        Regularization parameter for numerical stability.
  1072|         0|            0|            0|  0.00%|        Compared to unity, good values of the order of 0.01.
  1073|         0|            0|            0|  0.00%|    %(params_extra)s
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    See Also
  1076|         0|            0|            0|  0.00%|    --------
  1077|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1078|         0|            0|            0|  0.00%|           functions. See ``method=='anderson'`` in particular.
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    References
  1081|         0|            0|            0|  0.00%|    ----------
  1082|         0|            0|            0|  0.00%|    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|    """
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Note:
  1087|         0|            0|            0|  0.00%|    #
  1088|         0|            0|            0|  0.00%|    # Anderson method maintains a rank M approximation of the inverse Jacobian,
  1089|         0|            0|            0|  0.00%|    #
  1090|         0|            0|            0|  0.00%|    #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
  1091|         0|            0|            0|  0.00%|    #     A      = W + dF^H dF
  1092|         0|            0|            0|  0.00%|    #     W      = w0^2 diag(dF^H dF)
  1093|         0|            0|            0|  0.00%|    #
  1094|         0|            0|            0|  0.00%|    # so that for w0 = 0 the secant condition applies for last M iterates, i.e.,
  1095|         0|            0|            0|  0.00%|    #
  1096|         0|            0|            0|  0.00%|    #     J^-1 df_j = dx_j
  1097|         0|            0|            0|  0.00%|    #
  1098|         0|            0|            0|  0.00%|    # for all j = 0 ... M-1.
  1099|         0|            0|            0|  0.00%|    #
  1100|         0|            0|            0|  0.00%|    # Moreover, (from Sherman-Morrison-Woodbury formula)
  1101|         0|            0|            0|  0.00%|    #
  1102|         0|            0|            0|  0.00%|    #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
  1103|         0|            0|            0|  0.00%|    #    C   = (dX + alpha dF) A^-1
  1104|         0|            0|            0|  0.00%|    #    b   = -1/alpha
  1105|         0|            0|            0|  0.00%|    #
  1106|         0|            0|            0|  0.00%|    # and after simplification
  1107|         0|            0|            0|  0.00%|    #
  1108|         0|            0|            0|  0.00%|    #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
  1109|         0|            0|            0|  0.00%|    #
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, w0=0.01, M=5):
  1112|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1113|         0|            0|            0|  0.00%|        self.alpha = alpha
  1114|         0|            0|            0|  0.00%|        self.M = M
  1115|         0|            0|            0|  0.00%|        self.dx = []
  1116|         0|            0|            0|  0.00%|        self.df = []
  1117|         0|            0|            0|  0.00%|        self.gamma = None
  1118|         0|            0|            0|  0.00%|        self.w0 = w0
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1121|         0|            0|            0|  0.00%|        dx = -self.alpha*f
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|        n = len(self.dx)
  1124|         0|            0|            0|  0.00%|        if n == 0:
  1125|         0|            0|            0|  0.00%|            return dx
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1128|         0|            0|            0|  0.00%|        for k in range(n):
  1129|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|        try:
  1132|         0|            0|            0|  0.00%|            gamma = solve(self.a, df_f)
  1133|         0|            0|            0|  0.00%|        except LinAlgError:
  1134|         0|            0|            0|  0.00%|            # singular; reset the Jacobian approximation
  1135|         0|            0|            0|  0.00%|            del self.dx[:]
  1136|         0|            0|            0|  0.00%|            del self.df[:]
  1137|         0|            0|            0|  0.00%|            return dx
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|        for m in range(n):
  1140|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
  1141|         0|            0|            0|  0.00%|        return dx
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|    def matvec(self, f):
  1144|         0|            0|            0|  0.00%|        dx = -f/self.alpha
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|        n = len(self.dx)
  1147|         0|            0|            0|  0.00%|        if n == 0:
  1148|         0|            0|            0|  0.00%|            return dx
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|        df_f = np.empty(n, dtype=f.dtype)
  1151|         0|            0|            0|  0.00%|        for k in range(n):
  1152|         0|            0|            0|  0.00%|            df_f[k] = vdot(self.df[k], f)
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|        b = np.empty((n, n), dtype=f.dtype)
  1155|         0|            0|            0|  0.00%|        for i in range(n):
  1156|         0|            0|            0|  0.00%|            for j in range(n):
  1157|         0|            0|            0|  0.00%|                b[i,j] = vdot(self.df[i], self.dx[j])
  1158|         0|            0|            0|  0.00%|                if i == j and self.w0 != 0:
  1159|         0|            0|            0|  0.00%|                    b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
  1160|         0|            0|            0|  0.00%|        gamma = solve(b, df_f)
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|        for m in range(n):
  1163|         0|            0|            0|  0.00%|            dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
  1164|         0|            0|            0|  0.00%|        return dx
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1167|         0|            0|            0|  0.00%|        if self.M == 0:
  1168|         0|            0|            0|  0.00%|            return
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|        self.dx.append(dx)
  1171|         0|            0|            0|  0.00%|        self.df.append(df)
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|        while len(self.dx) > self.M:
  1174|         0|            0|            0|  0.00%|            self.dx.pop(0)
  1175|         0|            0|            0|  0.00%|            self.df.pop(0)
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|        n = len(self.dx)
  1178|         0|            0|            0|  0.00%|        a = np.zeros((n, n), dtype=f.dtype)
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|        for i in range(n):
  1181|         0|            0|            0|  0.00%|            for j in range(i, n):
  1182|         0|            0|            0|  0.00%|                if i == j:
  1183|         0|            0|            0|  0.00%|                    wd = self.w0**2
  1184|         0|            0|            0|  0.00%|                else:
  1185|         0|            0|            0|  0.00%|                    wd = 0
  1186|         0|            0|            0|  0.00%|                a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|        a += np.triu(a, 1).T.conj()
  1189|         0|            0|            0|  0.00%|        self.a = a
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1192|         0|            0|            0|  0.00%|# Simple iterations
  1193|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|class DiagBroyden(GenericBroyden):
  1197|         0|            0|            0|  0.00%|    """
  1198|         0|            0|            0|  0.00%|    Find a root of a function, using diagonal Broyden Jacobian approximation.
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    The Jacobian approximation is derived from previous iterations, by
  1201|         0|            0|            0|  0.00%|    retaining only the diagonal of Broyden matrices.
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    .. warning::
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1206|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|    Parameters
  1209|         0|            0|            0|  0.00%|    ----------
  1210|         0|            0|            0|  0.00%|    %(params_basic)s
  1211|         0|            0|            0|  0.00%|    alpha : float, optional
  1212|         0|            0|            0|  0.00%|        Initial guess for the Jacobian is (-1/alpha).
  1213|         0|            0|            0|  0.00%|    %(params_extra)s
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    See Also
  1216|         0|            0|            0|  0.00%|    --------
  1217|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1218|         0|            0|            0|  0.00%|           functions. See ``method=='diagbroyden'`` in particular.
  1219|         0|            0|            0|  0.00%|    """
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1222|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1223|         0|            0|            0|  0.00%|        self.alpha = alpha
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1226|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1227|         0|            0|            0|  0.00%|        self.d = np.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1230|         0|            0|            0|  0.00%|        return -f / self.d
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|    def matvec(self, f):
  1233|         0|            0|            0|  0.00%|        return -f * self.d
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1236|         0|            0|            0|  0.00%|        return -f / self.d.conj()
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1239|         0|            0|            0|  0.00%|        return -f * self.d.conj()
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def todense(self):
  1242|         0|            0|            0|  0.00%|        return np.diag(-self.d)
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1245|         0|            0|            0|  0.00%|        self.d -= (df + self.d*dx)*dx/dx_norm**2
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|class LinearMixing(GenericBroyden):
  1249|         0|            0|            0|  0.00%|    """
  1250|         0|            0|            0|  0.00%|    Find a root of a function, using a scalar Jacobian approximation.
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|    .. warning::
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1255|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|    Parameters
  1258|         0|            0|            0|  0.00%|    ----------
  1259|         0|            0|            0|  0.00%|    %(params_basic)s
  1260|         0|            0|            0|  0.00%|    alpha : float, optional
  1261|         0|            0|            0|  0.00%|        The Jacobian approximation is (-1/alpha).
  1262|         0|            0|            0|  0.00%|    %(params_extra)s
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|    See Also
  1265|         0|            0|            0|  0.00%|    --------
  1266|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1267|         0|            0|            0|  0.00%|           functions. See ``method=='linearmixing'`` in particular.
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    """
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|    def __init__(self, alpha=None):
  1272|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1273|         0|            0|            0|  0.00%|        self.alpha = alpha
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1276|         0|            0|            0|  0.00%|        return -f*self.alpha
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def matvec(self, f):
  1279|         0|            0|            0|  0.00%|        return -f/self.alpha
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1282|         0|            0|            0|  0.00%|        return -f*np.conj(self.alpha)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1285|         0|            0|            0|  0.00%|        return -f/np.conj(self.alpha)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def todense(self):
  1288|         0|            0|            0|  0.00%|        return np.diag(np.full(self.shape[0], -1/self.alpha))
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1291|         0|            0|            0|  0.00%|        pass
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|class ExcitingMixing(GenericBroyden):
  1295|         0|            0|            0|  0.00%|    """
  1296|         0|            0|            0|  0.00%|    Find a root of a function, using a tuned diagonal Jacobian approximation.
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|    The Jacobian matrix is diagonal and is tuned on each iteration.
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|    .. warning::
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|       This algorithm may be useful for specific problems, but whether
  1303|         0|            0|            0|  0.00%|       it will work may depend strongly on the problem.
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|    See Also
  1306|         0|            0|            0|  0.00%|    --------
  1307|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1308|         0|            0|            0|  0.00%|           functions. See ``method=='excitingmixing'`` in particular.
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|    Parameters
  1311|         0|            0|            0|  0.00%|    ----------
  1312|         0|            0|            0|  0.00%|    %(params_basic)s
  1313|         0|            0|            0|  0.00%|    alpha : float, optional
  1314|         0|            0|            0|  0.00%|        Initial Jacobian approximation is (-1/alpha).
  1315|         0|            0|            0|  0.00%|    alphamax : float, optional
  1316|         0|            0|            0|  0.00%|        The entries of the diagonal Jacobian are kept in the range
  1317|         0|            0|            0|  0.00%|        ``[alpha, alphamax]``.
  1318|         0|            0|            0|  0.00%|    %(params_extra)s
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|    def __init__(self, alpha=None, alphamax=1.0):
  1322|         0|            0|            0|  0.00%|        GenericBroyden.__init__(self)
  1323|         0|            0|            0|  0.00%|        self.alpha = alpha
  1324|         0|            0|            0|  0.00%|        self.alphamax = alphamax
  1325|         0|            0|            0|  0.00%|        self.beta = None
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|    def setup(self, x, F, func):
  1328|         0|            0|            0|  0.00%|        GenericBroyden.setup(self, x, F, func)
  1329|         0|            0|            0|  0.00%|        self.beta = np.full((self.shape[0],), self.alpha, dtype=self.dtype)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    def solve(self, f, tol=0):
  1332|         0|            0|            0|  0.00%|        return -f*self.beta
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|    def matvec(self, f):
  1335|         0|            0|            0|  0.00%|        return -f/self.beta
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|    def rsolve(self, f, tol=0):
  1338|         0|            0|            0|  0.00%|        return -f*self.beta.conj()
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|    def rmatvec(self, f):
  1341|         0|            0|            0|  0.00%|        return -f/self.beta.conj()
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def todense(self):
  1344|         0|            0|            0|  0.00%|        return np.diag(-1/self.beta)
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|    def _update(self, x, f, dx, df, dx_norm, df_norm):
  1347|         0|            0|            0|  0.00%|        incr = f*self.last_f > 0
  1348|         0|            0|            0|  0.00%|        self.beta[incr] += self.alpha
  1349|         0|            0|            0|  0.00%|        self.beta[~incr] = self.alpha
  1350|         0|            0|            0|  0.00%|        np.clip(self.beta, 0, self.alphamax, out=self.beta)
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1354|         0|            0|            0|  0.00%|# Iterative/Krylov approximated Jacobians
  1355|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|class KrylovJacobian(Jacobian):
  1358|         0|            0|            0|  0.00%|    r"""
  1359|         0|            0|            0|  0.00%|    Find a root of a function, using Krylov approximation for inverse Jacobian.
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|    This method is suitable for solving large-scale problems.
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    Parameters
  1364|         0|            0|            0|  0.00%|    ----------
  1365|         0|            0|            0|  0.00%|    %(params_basic)s
  1366|         0|            0|            0|  0.00%|    rdiff : float, optional
  1367|         0|            0|            0|  0.00%|        Relative step size to use in numerical differentiation.
  1368|         0|            0|            0|  0.00%|    method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
  1369|         0|            0|            0|  0.00%|        Krylov method to use to approximate the Jacobian.
  1370|         0|            0|            0|  0.00%|        Can be a string, or a function implementing the same interface as
  1371|         0|            0|            0|  0.00%|        the iterative solvers in `scipy.sparse.linalg`.
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|        The default is `scipy.sparse.linalg.lgmres`.
  1374|         0|            0|            0|  0.00%|    inner_maxiter : int, optional
  1375|         0|            0|            0|  0.00%|        Parameter to pass to the "inner" Krylov solver: maximum number of
  1376|         0|            0|            0|  0.00%|        iterations. Iteration will stop after maxiter steps even if the
  1377|         0|            0|            0|  0.00%|        specified tolerance has not been achieved.
  1378|         0|            0|            0|  0.00%|    inner_M : LinearOperator or InverseJacobian
  1379|         0|            0|            0|  0.00%|        Preconditioner for the inner Krylov iteration.
  1380|         0|            0|            0|  0.00%|        Note that you can use also inverse Jacobians as (adaptive)
  1381|         0|            0|            0|  0.00%|        preconditioners. For example,
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
  1384|         0|            0|            0|  0.00%|        >>> from scipy.optimize.nonlin import InverseJacobian
  1385|         0|            0|            0|  0.00%|        >>> jac = BroydenFirst()
  1386|         0|            0|            0|  0.00%|        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|        If the preconditioner has a method named 'update', it will be called
  1389|         0|            0|            0|  0.00%|        as ``update(x, f)`` after each nonlinear step, with ``x`` giving
  1390|         0|            0|            0|  0.00%|        the current point, and ``f`` the current function value.
  1391|         0|            0|            0|  0.00%|    outer_k : int, optional
  1392|         0|            0|            0|  0.00%|        Size of the subspace kept across LGMRES nonlinear iterations.
  1393|         0|            0|            0|  0.00%|        See `scipy.sparse.linalg.lgmres` for details.
  1394|         0|            0|            0|  0.00%|    inner_kwargs : kwargs
  1395|         0|            0|            0|  0.00%|        Keyword parameters for the "inner" Krylov solver
  1396|         0|            0|            0|  0.00%|        (defined with `method`). Parameter names must start with
  1397|         0|            0|            0|  0.00%|        the `inner_` prefix which will be stripped before passing on
  1398|         0|            0|            0|  0.00%|        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.
  1399|         0|            0|            0|  0.00%|    %(params_extra)s
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    See Also
  1402|         0|            0|            0|  0.00%|    --------
  1403|         0|            0|            0|  0.00%|    root : Interface to root finding algorithms for multivariate
  1404|         0|            0|            0|  0.00%|           functions. See ``method=='krylov'`` in particular.
  1405|         0|            0|            0|  0.00%|    scipy.sparse.linalg.gmres
  1406|         0|            0|            0|  0.00%|    scipy.sparse.linalg.lgmres
  1407|         0|            0|            0|  0.00%|
  1408|         0|            0|            0|  0.00%|    Notes
  1409|         0|            0|            0|  0.00%|    -----
  1410|         0|            0|            0|  0.00%|    This function implements a Newton-Krylov solver. The basic idea is
  1411|         0|            0|            0|  0.00%|    to compute the inverse of the Jacobian with an iterative Krylov
  1412|         0|            0|            0|  0.00%|    method. These methods require only evaluating the Jacobian-vector
  1413|         0|            0|            0|  0.00%|    products, which are conveniently approximated by a finite difference:
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|    .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    Due to the use of iterative matrix inverses, these methods can
  1418|         0|            0|            0|  0.00%|    deal with large nonlinear problems.
  1419|         0|            0|            0|  0.00%|
  1420|         0|            0|            0|  0.00%|    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov
  1421|         0|            0|            0|  0.00%|    solvers to choose from. The default here is `lgmres`, which is a
  1422|         0|            0|            0|  0.00%|    variant of restarted GMRES iteration that reuses some of the
  1423|         0|            0|            0|  0.00%|    information obtained in the previous Newton steps to invert
  1424|         0|            0|            0|  0.00%|    Jacobians in subsequent steps.
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|    For a review on Newton-Krylov methods, see for example [1]_,
  1427|         0|            0|            0|  0.00%|    and for the LGMRES sparse inverse method, see [2]_.
  1428|         0|            0|            0|  0.00%|
  1429|         0|            0|            0|  0.00%|    References
  1430|         0|            0|            0|  0.00%|    ----------
  1431|         0|            0|            0|  0.00%|    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
  1432|         0|            0|            0|  0.00%|           :doi:`10.1016/j.jcp.2003.08.010`
  1433|         0|            0|            0|  0.00%|    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
  1434|         0|            0|            0|  0.00%|           SIAM J. Matrix Anal. Appl. 26, 962 (2005).
  1435|         0|            0|            0|  0.00%|           :doi:`10.1137/S0895479803422014`
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|    """
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|    def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
  1440|         0|            0|            0|  0.00%|                 inner_M=None, outer_k=10, **kw):
  1441|         0|            0|            0|  0.00%|        self.preconditioner = inner_M
  1442|         0|            0|            0|  0.00%|        self.rdiff = rdiff
  1443|         0|            0|            0|  0.00%|        self.method = dict(
  1444|         0|            0|            0|  0.00%|            bicgstab=scipy.sparse.linalg.bicgstab,
  1445|         0|            0|            0|  0.00%|            gmres=scipy.sparse.linalg.gmres,
  1446|         0|            0|            0|  0.00%|            lgmres=scipy.sparse.linalg.lgmres,
  1447|         0|            0|            0|  0.00%|            cgs=scipy.sparse.linalg.cgs,
  1448|         0|            0|            0|  0.00%|            minres=scipy.sparse.linalg.minres,
  1449|         0|            0|            0|  0.00%|            ).get(method, method)
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|        self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|        if self.method is scipy.sparse.linalg.gmres:
  1454|         0|            0|            0|  0.00%|            # Replace GMRES's outer iteration with Newton steps
  1455|         0|            0|            0|  0.00%|            self.method_kw['restrt'] = inner_maxiter
  1456|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1457|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1458|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.gcrotmk:
  1459|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1460|         0|            0|            0|  0.00%|        elif self.method is scipy.sparse.linalg.lgmres:
  1461|         0|            0|            0|  0.00%|            self.method_kw['outer_k'] = outer_k
  1462|         0|            0|            0|  0.00%|            # Replace LGMRES's outer iteration with Newton steps
  1463|         0|            0|            0|  0.00%|            self.method_kw['maxiter'] = 1
  1464|         0|            0|            0|  0.00%|            # Carry LGMRES's `outer_v` vectors across nonlinear iterations
  1465|         0|            0|            0|  0.00%|            self.method_kw.setdefault('outer_v', [])
  1466|         0|            0|            0|  0.00%|            self.method_kw.setdefault('prepend_outer_v', True)
  1467|         0|            0|            0|  0.00%|            # But don't carry the corresponding Jacobian*v products, in case
  1468|         0|            0|            0|  0.00%|            # the Jacobian changes a lot in the nonlinear step
  1469|         0|            0|            0|  0.00%|            #
  1470|         0|            0|            0|  0.00%|            # XXX: some trust-region inspired ideas might be more efficient...
  1471|         0|            0|            0|  0.00%|            #      See e.g., Brown & Saad. But needs to be implemented separately
  1472|         0|            0|            0|  0.00%|            #      since it's not an inexact Newton method.
  1473|         0|            0|            0|  0.00%|            self.method_kw.setdefault('store_outer_Av', False)
  1474|         0|            0|            0|  0.00%|            self.method_kw.setdefault('atol', 0)
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|        for key, value in kw.items():
  1477|         0|            0|            0|  0.00%|            if not key.startswith('inner_'):
  1478|         0|            0|            0|  0.00%|                raise ValueError("Unknown parameter %s" % key)
  1479|         0|            0|            0|  0.00%|            self.method_kw[key[6:]] = value
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|    def _update_diff_step(self):
  1482|         0|            0|            0|  0.00%|        mx = abs(self.x0).max()
  1483|         0|            0|            0|  0.00%|        mf = abs(self.f0).max()
  1484|         0|            0|            0|  0.00%|        self.omega = self.rdiff * max(1, mx) / max(1, mf)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def matvec(self, v):
  1487|         0|            0|            0|  0.00%|        nv = norm(v)
  1488|         0|            0|            0|  0.00%|        if nv == 0:
  1489|         0|            0|            0|  0.00%|            return 0*v
  1490|         0|            0|            0|  0.00%|        sc = self.omega / nv
  1491|         0|            0|            0|  0.00%|        r = (self.func(self.x0 + sc*v) - self.f0) / sc
  1492|         0|            0|            0|  0.00%|        if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
  1493|         0|            0|            0|  0.00%|            raise ValueError('Function returned non-finite results')
  1494|         0|            0|            0|  0.00%|        return r
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    def solve(self, rhs, tol=0):
  1497|         0|            0|            0|  0.00%|        if 'tol' in self.method_kw:
  1498|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, **self.method_kw)
  1499|         0|            0|            0|  0.00%|        else:
  1500|         0|            0|            0|  0.00%|            sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
  1501|         0|            0|            0|  0.00%|        return sol
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|    def update(self, x, f):
  1504|         0|            0|            0|  0.00%|        self.x0 = x
  1505|         0|            0|            0|  0.00%|        self.f0 = f
  1506|         0|            0|            0|  0.00%|        self._update_diff_step()
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|        # Update also the preconditioner, if possible
  1509|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1510|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'update'):
  1511|         0|            0|            0|  0.00%|                self.preconditioner.update(x, f)
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|    def setup(self, x, f, func):
  1514|         0|            0|            0|  0.00%|        Jacobian.setup(self, x, f, func)
  1515|         0|            0|            0|  0.00%|        self.x0 = x
  1516|         0|            0|            0|  0.00%|        self.f0 = f
  1517|         0|            0|            0|  0.00%|        self.op = scipy.sparse.linalg.aslinearoperator(self)
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|        if self.rdiff is None:
  1520|         0|            0|            0|  0.00%|            self.rdiff = np.finfo(x.dtype).eps ** (1./2)
  1521|         0|            0|            0|  0.00%|
  1522|         0|            0|            0|  0.00%|        self._update_diff_step()
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|        # Setup also the preconditioner, if possible
  1525|         0|            0|            0|  0.00%|        if self.preconditioner is not None:
  1526|         0|            0|            0|  0.00%|            if hasattr(self.preconditioner, 'setup'):
  1527|         0|            0|            0|  0.00%|                self.preconditioner.setup(x, f, func)
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1531|         0|            0|            0|  0.00%|# Wrapper functions
  1532|         0|            0|            0|  0.00%|#------------------------------------------------------------------------------
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|def _nonlin_wrapper(name, jac):
  1535|         0|            0|            0|  0.00%|    """
  1536|         0|            0|            0|  0.00%|    Construct a solver wrapper with given name and Jacobian approx.
  1537|         0|            0|            0|  0.00%|
  1538|         0|            0|            0|  0.00%|    It inspects the keyword arguments of ``jac.__init__``, and allows to
  1539|         0|            0|            0|  0.00%|    use the same arguments in the wrapper function, in addition to the
  1540|         0|            0|            0|  0.00%|    keyword arguments of `nonlin_solve`
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    """
  1543|         0|            0|            0|  0.00%|    signature = _getfullargspec(jac.__init__)
  1544|         0|            0|            0|  0.00%|    args, varargs, varkw, defaults, kwonlyargs, kwdefaults, _ = signature
  1545|         0|            0|            0|  0.00%|    kwargs = list(zip(args[-len(defaults):], defaults))
  1546|         0|            0|            0|  0.00%|    kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
  1547|         0|            0|            0|  0.00%|    if kw_str:
  1548|         0|            0|            0|  0.00%|        kw_str = ", " + kw_str
  1549|         0|            0|            0|  0.00%|    kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
  1550|         0|            0|            0|  0.00%|    if kwkw_str:
  1551|         0|            0|            0|  0.00%|        kwkw_str = kwkw_str + ", "
  1552|         0|            0|            0|  0.00%|    if kwonlyargs:
  1553|         0|            0|            0|  0.00%|        raise ValueError('Unexpected signature %s' % signature)
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|    # Construct the wrapper function so that its keyword arguments
  1556|         0|            0|            0|  0.00%|    # are visible in pydoc.help etc.
  1557|         0|            0|            0|  0.00%|    wrapper = """
  1558|         0|            0|            0|  0.00%|def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
  1559|         0|            0|            0|  0.00%|             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
  1560|         0|            0|            0|  0.00%|             tol_norm=None, line_search='armijo', callback=None, **kw):
  1561|         0|            0|            0|  0.00%|    jac = %(jac)s(%(kwkw)s **kw)
  1562|         0|            0|            0|  0.00%|    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
  1563|         0|            0|            0|  0.00%|                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
  1564|         0|            0|            0|  0.00%|                        callback)
  1565|         0|            0|            0|  0.00%|"""
  1566|         0|            0|            0|  0.00%|
  1567|         0|            0|            0|  0.00%|    wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
  1568|         0|            0|            0|  0.00%|                             kwkw=kwkw_str)
  1569|         0|            0|            0|  0.00%|    ns = {}
  1570|         0|            0|            0|  0.00%|    ns.update(globals())
  1571|         0|            0|            0|  0.00%|    exec(wrapper, ns)
  1572|         0|            0|            0|  0.00%|    func = ns[name]
  1573|         0|            0|            0|  0.00%|    func.__doc__ = jac.__doc__
  1574|         0|            0|            0|  0.00%|    _set_doc(func)
  1575|         0|            0|            0|  0.00%|    return func
  1576|         0|            0|            0|  0.00%|
  1577|         0|            0|            0|  0.00%|
  1578|         0|            0|            0|  0.00%|broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
  1579|         0|            0|            0|  0.00%|broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
  1580|         0|            0|            0|  0.00%|anderson = _nonlin_wrapper('anderson', Anderson)
  1581|         0|            0|            0|  0.00%|linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
  1582|         0|            0|            0|  0.00%|diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
  1583|         0|            0|            0|  0.00%|excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
  1584|         0|            0|            0|  0.00%|newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
File: <string>_8
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_142
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_160
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_164
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_156
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_167
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_147
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_165
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_177
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <decorator-gen-2>
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
File: <string>_143
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|
